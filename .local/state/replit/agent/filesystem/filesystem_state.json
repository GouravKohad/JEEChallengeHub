{"file_contents":{"design_guidelines.md":{"content":"# JEE Challenge App Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern educational platforms like Khan Academy and Notion, combined with productivity apps like Habitica for gamification elements.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Deep Blue: 220 85% 25% (trust, focus, academic excellence)\n- Bright Blue: 210 90% 55% (energy, motivation)\n\n**Supporting Colors:**\n- Success Green: 142 70% 45% (completed challenges)\n- Warning Orange: 35 85% 55% (pending tasks)\n- Error Red: 0 75% 50% (missed deadlines)\n- Neutral Gray: 220 10% 95% (backgrounds, borders)\n\n**Dark Mode:**\n- Background: 220 25% 8%\n- Cards: 220 20% 12%\n- Text: 220 15% 90%\n\n### Typography\n- **Primary Font**: Inter (Google Fonts) - clean, readable for academic content\n- **Headers**: Font weights 600-700, sizes from text-xl to text-4xl\n- **Body**: Font weight 400-500, text-sm to text-lg\n- **Accent**: Font weight 500 for buttons and CTAs\n\n### Layout System\n**Spacing Primitives**: Tailwind units of 2, 4, 6, and 8\n- Tight spacing: p-2, m-2 for compact elements\n- Standard spacing: p-4, m-4 for general layout\n- Generous spacing: p-6, m-6 for cards and sections\n- Large spacing: p-8, m-8 for major layout divisions\n\n### Component Library\n\n**Navigation:**\n- Sidebar navigation with collapsible sections\n- Top header with user progress summary\n- Breadcrumb navigation for deep sections\n\n**Challenge Cards:**\n- Elevated cards with subtle shadows\n- Progress bars with animated fills\n- Challenge type badges with color coding\n- Time remaining indicators\n\n**Forms:**\n- Multi-step challenge creation wizard\n- Subject/topic selection with visual chips\n- Duration sliders with real-time preview\n- Save/continue buttons with loading states\n\n**Data Displays:**\n- Progress dashboards with circular progress indicators\n- Daily task lists with checkboxes\n- Calendar views for challenge scheduling\n- Statistics cards with key metrics\n\n**Interactive Elements:**\n- Modal overlays for challenge details\n- Expandable sections for topic breakdown\n- Drag-and-drop for task reordering\n- Tooltip guidance for complex features\n\n### Visual Treatments\n**Gradients:**\n- Hero section: Subtle blue gradient (220 85% 25% to 210 70% 35%)\n- Success states: Green to blue gradient for completed challenges\n- Background accents: Very subtle gray gradients for depth\n\n**Animations:**\n- Micro-interactions: Button hover states, checkbox animations\n- Progress animations: Smooth bar fills and counter increments\n- Page transitions: Slide transitions between challenge views\n- Loading states: Skeleton screens and progress indicators\n\n### Layout Structure\n**Dashboard Layout:**\n- Left sidebar (280px) with navigation\n- Main content area with responsive grid\n- Right panel for quick stats (on larger screens)\n\n**Challenge Creation:**\n- Centered modal workflow (max-width 600px)\n- Step-by-step progression with visual indicators\n- Preview pane showing generated schedule\n\n**Challenge View:**\n- Full-width header with challenge info\n- Two-column layout: tasks list and progress tracking\n- Floating action button for quick task completion\n\n### Content Strategy\n- Clear visual hierarchy with subject color coding\n- Consistent iconography using Heroicons\n- Motivational messaging for streak tracking\n- Achievement badges for milestone completion\n- Visual progress indicators throughout the app\n\nThis design creates a focused, academic environment that motivates JEE aspirants while maintaining the functionality needed for serious study planning and progress tracking.","size_bytes":3566},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type Challenge, type DailyTask, type InsertChallenge, type InsertDailyTask } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getChallenge(id: string): Promise<Challenge | undefined>;\n  getChallenges(): Promise<Challenge[]>;\n  createChallenge(challenge: InsertChallenge): Promise<Challenge>;\n  updateChallenge(id: string, updates: Partial<Challenge>): Promise<Challenge | undefined>;\n  deleteChallenge(id: string): Promise<boolean>;\n  getTasks(challengeId?: string): Promise<DailyTask[]>;\n  createTask(task: InsertDailyTask): Promise<DailyTask>;\n  updateTask(id: string, updates: Partial<DailyTask>): Promise<DailyTask | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private challenges: Map<string, Challenge>;\n  private tasks: Map<string, DailyTask>;\n\n  constructor() {\n    this.challenges = new Map();\n    this.tasks = new Map();\n  }\n\n  async getChallenge(id: string): Promise<Challenge | undefined> {\n    return this.challenges.get(id);\n  }\n\n  async getChallenges(): Promise<Challenge[]> {\n    return Array.from(this.challenges.values());\n  }\n\n  async createChallenge(insertChallenge: InsertChallenge): Promise<Challenge> {\n    const id = randomUUID();\n    const challenge: Challenge = {\n      ...insertChallenge,\n      id,\n      createdAt: new Date().toISOString(),\n      progress: {\n        completedDays: 0,\n        totalDays: insertChallenge.duration,\n        completedTasks: 0,\n        totalTasks: insertChallenge.duration * 3, // Estimated 3 tasks per day\n        currentStreak: 0,\n        longestStreak: 0\n      }\n    };\n    this.challenges.set(id, challenge);\n    return challenge;\n  }\n\n  async updateChallenge(id: string, updates: Partial<Challenge>): Promise<Challenge | undefined> {\n    const challenge = this.challenges.get(id);\n    if (challenge) {\n      const updated = { ...challenge, ...updates };\n      this.challenges.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  async deleteChallenge(id: string): Promise<boolean> {\n    return this.challenges.delete(id);\n  }\n\n  async getTasks(challengeId?: string): Promise<DailyTask[]> {\n    const tasks = Array.from(this.tasks.values());\n    if (challengeId) {\n      return tasks.filter(task => task.challengeId === challengeId);\n    }\n    return tasks;\n  }\n\n  async createTask(insertTask: InsertDailyTask): Promise<DailyTask> {\n    const id = randomUUID();\n    const task: DailyTask = {\n      ...insertTask,\n      id,\n      completed: false\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<DailyTask>): Promise<DailyTask | undefined> {\n    const task = this.tasks.get(id);\n    if (task) {\n      const updated = { ...task, ...updates };\n      this.tasks.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2949},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// JEE Subjects and Topics\nexport const JEE_SUBJECTS = ['Physics', 'Chemistry', 'Mathematics'] as const;\n\n// Chapter-organized topics (new structure)\nexport const JEE_CHAPTERS = {\n  Physics: {\n    'Mechanics': [\n      'Units and Dimensions', 'Significant Figures', 'Error Analysis',\n      'Scalars and Vectors', 'Vector Addition', 'Vector Multiplication',\n      'Kinematics - Distance and Displacement', 'Speed and Velocity', 'Acceleration',\n      'Equations of Motion', 'Graphs of Motion', 'Relative Motion',\n      'Projectile Motion', 'Circular Motion', 'Banking of Roads',\n      'Newton\\'s Laws of Motion', 'Inertia', 'Momentum', 'Impulse',\n      'Static and Kinetic Friction', 'Laws of Friction', 'Motion on Inclined Plane',\n      'Work', 'Energy', 'Power', 'Conservative and Non-conservative Forces',\n      'Collision in 1D and 2D', 'Centre of Mass', 'Angular Motion',\n      'Moment of Inertia', 'Torque', 'Angular Momentum',\n      'Kepler\\'s Laws', 'Universal Law of Gravitation', 'Gravitational Field',\n      'Gravitational Potential', 'Escape Velocity', 'Satellite Motion'\n    ],\n    'Properties of Matter': [\n      'Elasticity', 'Stress and Strain', 'Young\\'s Modulus', 'Bulk Modulus',\n      'Fluid Statics', 'Pascal\\'s Law', 'Archimedes Principle',\n      'Fluid Dynamics', 'Bernoulli\\'s Theorem', 'Viscosity', 'Surface Tension'\n    ],\n    'Heat and Thermodynamics': [\n      'Temperature and Heat', 'Thermal Expansion', 'Calorimetry',\n      'Heat Transfer', 'Laws of Thermodynamics', 'Isothermal and Adiabatic Processes',\n      'Heat Engines', 'Refrigerators', 'Entropy',\n      'Kinetic Theory of Gases', 'Gas Laws', 'Mean Free Path'\n    ],\n    'Oscillations and Waves': [\n      'Simple Harmonic Motion', 'Pendulum', 'Springs',\n      'Wave Motion', 'Wave Equation', 'Sound Waves',\n      'Doppler Effect', 'Beats', 'Resonance', 'Standing Waves'\n    ],\n    'Electricity and Magnetism': [\n      'Coulomb\\'s Law', 'Electric Field', 'Gauss\\'s Law',\n      'Electric Potential', 'Capacitance', 'Dielectrics',\n      'Electric Current', 'Ohm\\'s Law', 'Resistance', 'Resistivity',\n      'Series and Parallel Circuits', 'Kirchhoff\\'s Laws', 'Wheatstone Bridge',\n      'Magnetic Field', 'Biot-Savart Law', 'Ampere\\'s Law',\n      'Force on Current Carrying Conductor', 'Magnetic Dipole',\n      'Electromagnetic Induction', 'Faraday\\'s Law', 'Lenz\\'s Law',\n      'Self and Mutual Inductance', 'LR Circuits',\n      'AC Circuits', 'RLC Circuits', 'Resonance in AC Circuits',\n      'Transformer', 'AC Generator'\n    ],\n    'Electromagnetic Waves and Optics': [\n      'Maxwell\\'s Equations', 'Electromagnetic Spectrum',\n      'Reflection and Refraction', 'Total Internal Reflection',\n      'Lens Formula', 'Mirror Formula', 'Optical Instruments',\n      'Interference', 'Young\\'s Double Slit', 'Diffraction',\n      'Polarization', 'Scattering'\n    ],\n    'Modern Physics': [\n      'Photoelectric Effect', 'Compton Effect', 'de Broglie Waves',\n      'Bohr\\'s Atomic Model', 'Hydrogen Spectrum', 'X-rays',\n      'Radioactivity', 'Nuclear Reactions', 'Mass-Energy Equivalence',\n      'p-n Junction', 'Transistors', 'Logic Gates'\n    ]\n  },\n  Chemistry: {\n    'Physical Chemistry': [\n      'Mole Concept and Stoichiometry', 'Atomic Mass', 'Molecular Mass',\n      'Empirical and Molecular Formula', 'Percentage Composition',\n      'Thomson\\'s Model', 'Rutherford\\'s Model', 'Bohr\\'s Model',\n      'Quantum Numbers', 'Electronic Configuration', 'Aufbau Principle',\n      'Hund\\'s Rule', 'Pauli Exclusion Principle',\n      'Mendeleev\\'s Periodic Law', 'Modern Periodic Law', 'Periodic Trends',\n      'Ionization Energy', 'Electron Affinity', 'Electronegativity',\n      'Ionic Bonding', 'Covalent Bonding', 'Metallic Bonding',\n      'VSEPR Theory', 'Hybridization', 'Molecular Orbital Theory',\n      'Gas Laws', 'Ideal Gas Equation', 'Real Gases',\n      'Kinetic Theory', 'Liquid State', 'Solid State',\n      'Crystal Lattices', 'Unit Cells', 'Packing Efficiency',\n      'First Law of Thermodynamics', 'Enthalpy', 'Entropy',\n      'Gibbs Free Energy', 'Spontaneity', 'Hess\\'s Law',\n      'Chemical Equilibrium', 'Le Chatelier\\'s Principle', 'Equilibrium Constants',\n      'Acid-Base Equilibrium', 'pH and pOH', 'Buffer Solutions',\n      'Solubility Product', 'Common Ion Effect',\n      'Solutions and Colligative Properties', 'Raoult\\'s Law', 'Vapour Pressure Lowering',\n      'Elevation of Boiling Point', 'Depression of Freezing Point', 'Osmotic Pressure',\n      'Van\\'t Hoff Factor', 'Abnormal Molecular Mass',\n      'Oxidation and Reduction', 'Balancing Redox Equations',\n      'Electrochemical Cells', 'EMF', 'Nernst Equation',\n      'Electrolysis', 'Faraday\\'s Laws',\n      'Rate of Reaction', 'Order and Molecularity', 'Rate Laws',\n      'Arrhenius Equation', 'Collision Theory', 'Catalysis',\n      'Adsorption', 'Colloids', 'Emulsions'\n    ],\n    'Inorganic Chemistry': [\n      'Occurrence and Extraction', 'Properties of Hydrogen',\n      'Hydrides', 'Water', 'Hydrogen Peroxide',\n      'Alkali Metals', 'Alkaline Earth Metals', 'Group Trends',\n      'Boron Family', 'Carbon Family', 'Nitrogen Family',\n      'Oxygen Family', 'Halogen Family', 'Noble Gases',\n      'Transition Elements', 'Inner Transition Elements',\n      'Coordination Compounds', 'Crystal Field Theory',\n      'Ligands', 'Nomenclature', 'Isomerism in Complexes',\n      'Environmental Pollution', 'Green Chemistry',\n      'Metallurgy', 'Extraction of Metals', 'Refining'\n    ],\n    'Organic Chemistry': [\n      'Classification of Organic Compounds', 'IUPAC Nomenclature',\n      'Isomerism', 'Reaction Mechanisms', 'Inductive Effect',\n      'Resonance', 'Hyperconjugation', 'Electrophiles and Nucleophiles',\n      'Alkanes', 'Preparation and Properties', 'Conformations',\n      'Alkenes', 'Geometric Isomerism', 'Markovnikov\\'s Rule',\n      'Alkynes', 'Acidic Nature', 'Reactions',\n      'Aromatic Compounds', 'Benzene', 'Electrophilic Substitution',\n      'Haloalkanes', 'Nucleophilic Substitution', 'Elimination Reactions',\n      'Haloarenes', 'Nucleophilic Aromatic Substitution',\n      'Alcohols', 'Preparation and Properties', 'Dehydration',\n      'Phenols', 'Acidity', 'Electrophilic Substitution',\n      'Ethers', 'Preparation', 'Cleavage Reactions',\n      'Aldehydes and Ketones', 'Carbonyl Chemistry', 'Aldol Reactions',\n      'Carboxylic Acids', 'Acidity', 'Derivatives',\n      'Amines', 'Basicity', 'Diazotization',\n      'Carbohydrates', 'Proteins', 'Amino Acids',\n      'Nucleic Acids', 'Vitamins', 'Hormones',\n      'Polymers', 'Addition Polymers', 'Condensation Polymers',\n      'Drugs', 'Detergents', 'Food Chemistry'\n    ]\n  },\n  Mathematics: {\n    'Algebra': [\n      'Sets and Relations', 'Types of Relations', 'Equivalence Relations',\n      'Functions', 'Types of Functions', 'Composite Functions',\n      'Inverse Functions', 'Binary Operations',\n      'Trigonometric Ratios', 'Trigonometric Identities',\n      'Trigonometric Equations', 'Inverse Trigonometric Functions',\n      'Principal of Mathematical Induction', 'Applications',\n      'Complex Numbers', 'Argand Plane', 'De Moivre\\'s Theorem',\n      'Roots of Unity', 'Quadratic Equations in Complex Numbers',\n      'Linear Inequalities', 'Graphical Solution', 'Linear Programming',\n      'Permutations', 'Combinations', 'Circular Permutations',\n      'Restricted Permutations', 'Distribution Problems',\n      'Binomial Theorem', 'General Term', 'Greatest Coefficient',\n      'Arithmetic Progression', 'Geometric Progression', 'Harmonic Progression',\n      'Arithmetic-Geometric Progression', 'Sum of Special Series',\n      'Quadratic Equations', 'Nature of Roots', 'Sum and Product of Roots',\n      'Theory of Equations', 'Relation between Roots and Coefficients'\n    ],\n    'Coordinate Geometry': [\n      'Cartesian Coordinates', 'Distance Formula', 'Section Formula',\n      'Straight Lines', 'Slope', 'Angle between Lines',\n      'Distance from Point to Line', 'Family of Lines',\n      'Circle', 'Equation of Circle', 'Tangent and Normal',\n      'Chord Properties', 'Power of Point',\n      'Parabola', 'Standard Equation', 'Focal Chord Properties',\n      'Ellipse', 'Standard Equation', 'Eccentricity',\n      'Hyperbola', 'Standard Equation', 'Asymptotes',\n      'Three Dimensional Coordinates', 'Direction Cosines',\n      'Distance and Section Formula in 3D', 'Plane',\n      'Straight Line in 3D', 'Angle between Lines and Planes'\n    ],\n    'Calculus': [\n      'Limits', 'Evaluation of Limits', 'L\\'Hospital\\'s Rule',\n      'Continuity', 'Differentiability', 'Derivatives',\n      'Chain Rule', 'Implicit Differentiation', 'Logarithmic Differentiation',\n      'Parametric Differentiation', 'Higher Order Derivatives',\n      'Mean Value Theorems', 'Increasing and Decreasing Functions',\n      'Maxima and Minima', 'Concavity', 'Curve Sketching',\n      'Rate of Change', 'Related Rates', 'Tangent and Normal',\n      'Indefinite Integration', 'Methods of Integration',\n      'Integration by Parts', 'Partial Fractions',\n      'Definite Integration', 'Properties of Definite Integrals',\n      'Area under Curves', 'Area between Curves',\n      'Volume of Solids of Revolution',\n      'Differential Equations', 'Order and Degree',\n      'Variables Separable', 'Homogeneous Equations',\n      'Linear Differential Equations', 'Applications'\n    ],\n    'Vector Algebra and Geometry': [\n      'Vector Addition', 'Scalar and Vector Products',\n      'Scalar Triple Product', 'Vector Triple Product',\n      'Vector Equations of Line and Plane',\n      'Angle between Vectors', 'Projection of Vectors'\n    ],\n    'Statistics and Probability': [\n      'Measures of Central Tendency', 'Measures of Dispersion',\n      'Correlation and Regression', 'Probability',\n      'Addition and Multiplication Theorems', 'Conditional Probability',\n      'Bayes\\' Theorem', 'Random Variables', 'Probability Distributions',\n      'Binomial Distribution', 'Normal Distribution'\n    ],\n    'Mathematical Reasoning': [\n      'Statements', 'Logical Connectives', 'Truth Tables',\n      'Conditional Statements', 'Converse and Contrapositive',\n      'Mathematical Proofs', 'Proof by Contradiction'\n    ],\n    'Matrices and Determinants': [\n      'Types of Matrices', 'Matrix Operations', 'Transpose',\n      'Symmetric and Skew Symmetric Matrices', 'Inverse of Matrix',\n      'Elementary Row Operations', 'Rank of Matrix',\n      'Determinants', 'Properties of Determinants', 'Cofactors',\n      'Adjoint of Matrix', 'Cramer\\'s Rule',\n      'System of Linear Equations', 'Homogeneous Equations'\n    ]\n  }\n} as const;\n\n// Backward-compatible flat topics (derived from chapters)\nexport const JEE_TOPICS = {\n  Physics: Object.values(JEE_CHAPTERS.Physics).flat(),\n  Chemistry: Object.values(JEE_CHAPTERS.Chemistry).flat(),\n  Mathematics: Object.values(JEE_CHAPTERS.Mathematics).flat()\n} as const;\n\nexport const CHALLENGE_TYPES = [\n  { id: 'revision', name: '15 Days Revision Challenge', duration: 15, description: 'Complete revision of selected topics' },\n  { id: 'backlog', name: '20 Days Backlog Completion', duration: 20, description: 'Clear your pending syllabus' },\n  { id: 'dpp', name: '30 Days DPP Challenge', duration: 30, description: 'Daily Practice Problems marathon' },\n  { id: 'mock', name: '45 Days Mock Test Series', duration: 45, description: 'Intensive mock test preparation' },\n  { id: 'weak-areas', name: '14 Days Weak Areas Focus', duration: 14, description: 'Target your weak subjects/topics' },\n  { id: 'full-syllabus', name: '60 Days Complete Syllabus', duration: 60, description: 'Cover entire JEE syllabus systematically' },\n  { id: 'intensive-practice', name: '21 Days Intensive Practice', duration: 21, description: 'High-intensity problem solving with time constraints' },\n  { id: 'concept-mastery', name: '28 Days Concept Mastery', duration: 28, description: 'Deep conceptual understanding through theory and applications' },\n  { id: 'exam-simulation', name: '10 Days Exam Simulation', duration: 10, description: 'Realistic JEE exam conditions and time management' },\n  { id: 'formula-sprint', name: '7 Days Formula Sprint', duration: 7, description: 'Quick revision of all important formulas and derivations' },\n  { id: 'previous-years', name: '25 Days Previous Year Questions', duration: 25, description: 'Solve and analyze past JEE questions topic-wise' },\n  { id: 'speed-accuracy', name: '18 Days Speed & Accuracy', duration: 18, description: 'Improve solving speed while maintaining accuracy' }\n] as const;\n\n// Schema definitions\nexport const challengeSchema = z.object({\n  id: z.string(),\n  type: z.enum(['revision', 'backlog', 'dpp', 'mock', 'weak-areas', 'full-syllabus', 'intensive-practice', 'concept-mastery', 'exam-simulation', 'formula-sprint', 'previous-years', 'speed-accuracy']),\n  name: z.string(),\n  duration: z.number(),\n  subjects: z.array(z.enum(JEE_SUBJECTS)),\n  topics: z.record(z.array(z.string())),\n  startDate: z.string(),\n  endDate: z.string(),\n  dailyTimeHours: z.number().min(1).max(12),\n  status: z.enum(['active', 'completed', 'paused', 'archived']),\n  createdAt: z.string(),\n  progress: z.object({\n    completedDays: z.number(),\n    totalDays: z.number(),\n    completedTasks: z.number(),\n    totalTasks: z.number(),\n    currentStreak: z.number(),\n    longestStreak: z.number()\n  })\n});\n\nexport const dailyTaskSchema = z.object({\n  id: z.string(),\n  challengeId: z.string(),\n  date: z.string(),\n  subject: z.enum(JEE_SUBJECTS),\n  chapter: z.string().optional(),\n  topic: z.string(),\n  taskType: z.enum(['theory', 'practice', 'revision', 'mock-test', 'dpp', 'concept-mastery', 'intensive-practice', 'exam-simulation', 'formula-practice', 'previous-year', 'speed-drill', 'video-lecture', 'concept-mapping']),\n  description: z.string(),\n  timeAllotted: z.number(), // in minutes\n  completed: z.boolean(),\n  completedAt: z.string().optional(),\n  difficulty: z.enum(['easy', 'medium', 'hard']),\n  notes: z.string().optional()\n});\n\nexport const insertChallengeSchema = challengeSchema.omit({ id: true, createdAt: true, progress: true });\nexport const insertDailyTaskSchema = dailyTaskSchema.omit({ id: true, completed: true, completedAt: true });\n\nexport type Challenge = z.infer<typeof challengeSchema>;\nexport type DailyTask = z.infer<typeof dailyTaskSchema>;\nexport type InsertChallenge = z.infer<typeof insertChallengeSchema>;\nexport type InsertDailyTask = z.infer<typeof insertDailyTaskSchema>;\nexport type Subject = typeof JEE_SUBJECTS[number];\nexport type ChallengeType = typeof CHALLENGE_TYPES[number];\n\n// Chapter and topic types\nexport type PhysicsChapter = keyof typeof JEE_CHAPTERS.Physics;\nexport type ChemistryChapter = keyof typeof JEE_CHAPTERS.Chemistry;\nexport type MathematicsChapter = keyof typeof JEE_CHAPTERS.Mathematics;\nexport type Chapter = PhysicsChapter | ChemistryChapter | MathematicsChapter;\n\n// Helper function to get all chapters for a subject\nexport const getChaptersForSubject = (subject: Subject): string[] => {\n  return Object.keys(JEE_CHAPTERS[subject]);\n};\n\n// Helper function to get all topics for a chapter\nexport const getTopicsForChapter = (subject: Subject, chapter: string): string[] => {\n  if (subject === 'Physics') {\n    return [...(JEE_CHAPTERS.Physics[chapter as keyof typeof JEE_CHAPTERS.Physics] || [])];\n  } else if (subject === 'Chemistry') {\n    return [...(JEE_CHAPTERS.Chemistry[chapter as keyof typeof JEE_CHAPTERS.Chemistry] || [])];\n  } else if (subject === 'Mathematics') {\n    return [...(JEE_CHAPTERS.Mathematics[chapter as keyof typeof JEE_CHAPTERS.Mathematics] || [])];\n  }\n  return [];\n};\n\n// Helper function to get all topics for a subject (flattened)\nexport const getAllTopicsForSubject = (subject: Subject): string[] => {\n  return JEE_TOPICS[subject];\n};\n\n// Helper function to find which chapter a topic belongs to\nexport const getChapterForTopic = (subject: Subject, topic: string): string | null => {\n  const chapters = JEE_CHAPTERS[subject];\n  for (const [chapterName, topics] of Object.entries(chapters)) {\n    if (topics.includes(topic as never)) {\n      return chapterName;\n    }\n  }\n  return null;\n};\n","size_bytes":16046},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ChallengeProvider } from \"@/contexts/ChallengeContext\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Challenges from \"@/pages/Challenges\";\nimport Tasks from \"@/pages/Tasks\";\nimport TaskManagement from \"@/pages/TaskManagement\";\nimport Progress from \"@/pages/Progress\";\nimport StreakPage from \"@/pages/StreakPage\";\nimport Topics from \"@/pages/Topics\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/challenges\" component={Challenges} />\n      <Route path=\"/tasks\" component={Tasks} />\n      <Route path=\"/task-management\" component={TaskManagement} />\n      <Route path=\"/progress\" component={Progress} />\n      <Route path=\"/streak\" component={StreakPage} />\n      <Route path=\"/topic-management\" component={Topics} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  // Custom sidebar width for JEE application\n  const style = {\n    \"--sidebar-width\": \"20rem\",       // 320px for better content\n    \"--sidebar-width-icon\": \"4rem\",   // default icon width\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ChallengeProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1\">\n                <header className=\"flex items-center justify-between p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <div className=\"flex items-center gap-2\">\n                    <ThemeToggle />\n                  </div>\n                </header>\n                <main className=\"flex-1 overflow-auto p-6\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </ChallengeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2553},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 5% 98%;\n  --foreground: 220 15% 15%;\n  --border: 220 8% 88%;\n  --card: 220 5% 96%;\n  --card-foreground: 220 15% 15%;\n  --card-border: 220 8% 85%;\n  --sidebar: 220 5% 94%;\n  --sidebar-foreground: 220 15% 15%;\n  --sidebar-border: 220 8% 82%;\n  --sidebar-primary: 220 85% 25%;\n  --sidebar-primary-foreground: 220 20% 95%;\n  --sidebar-accent: 220 6% 90%;\n  --sidebar-accent-foreground: 220 15% 20%;\n  --sidebar-ring: 220 85% 25%;\n  --popover: 220 5% 92%;\n  --popover-foreground: 220 15% 15%;\n  --popover-border: 220 8% 80%;\n  --primary: 220 85% 25%;\n  --primary-foreground: 220 20% 95%;\n  --secondary: 220 6% 88%;\n  --secondary-foreground: 220 15% 20%;\n  --muted: 220 6% 90%;\n  --muted-foreground: 220 10% 45%;\n  --accent: 210 15% 92%;\n  --accent-foreground: 210 15% 25%;\n  --destructive: 0 75% 50%;\n  --destructive-foreground: 0 20% 95%;\n  --input: 220 15% 75%;\n  --ring: 220 85% 25%;\n  --chart-1: 142 70% 45%;\n  --chart-2: 35 85% 55%;\n  --chart-3: 210 90% 55%;\n  --chart-4: 280 65% 50%;\n  --chart-5: 320 75% 45%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 8% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 8% 15% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 8% 15% / 0.05), 0px 2px 4px -1px hsl(220 8% 15% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(220 8% 15% / 0.1), 0px 4px 6px -1px hsl(220 8% 15% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(220 8% 15% / 0.1), 0px 10px 15px -3px hsl(220 8% 15% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 8% 15% / 0.1), 0px 20px 25px -5px hsl(220 8% 15% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 8% 15% / 0.1), 0px 25px 50px -12px hsl(220 8% 15% / 0.25);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 8% 15% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 25% 8%;\n  --foreground: 220 15% 90%;\n  --border: 220 20% 18%;\n  --card: 220 20% 12%;\n  --card-foreground: 220 15% 90%;\n  --card-border: 220 18% 20%;\n  --sidebar: 220 22% 10%;\n  --sidebar-foreground: 220 15% 90%;\n  --sidebar-border: 220 18% 15%;\n  --sidebar-primary: 220 85% 25%;\n  --sidebar-primary-foreground: 220 20% 95%;\n  --sidebar-accent: 220 18% 16%;\n  --sidebar-accent-foreground: 220 15% 85%;\n  --sidebar-ring: 220 85% 35%;\n  --popover: 220 18% 14%;\n  --popover-foreground: 220 15% 90%;\n  --popover-border: 220 16% 22%;\n  --primary: 220 85% 25%;\n  --primary-foreground: 220 20% 95%;\n  --secondary: 220 16% 20%;\n  --secondary-foreground: 220 15% 85%;\n  --muted: 220 16% 16%;\n  --muted-foreground: 220 10% 65%;\n  --accent: 210 15% 18%;\n  --accent-foreground: 210 15% 85%;\n  --destructive: 0 75% 50%;\n  --destructive-foreground: 0 20% 95%;\n  --input: 220 15% 35%;\n  --ring: 220 85% 35%;\n  --chart-1: 142 70% 65%;\n  --chart-2: 35 85% 65%;\n  --chart-3: 210 90% 65%;\n  --chart-4: 280 65% 70%;\n  --chart-5: 320 75% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 25% 3% / 0.25);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 25% 3% / 0.3);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 25% 3% / 0.25), 0px 2px 4px -1px hsl(220 25% 3% / 0.3);\n  --shadow: 0px 1px 3px 0px hsl(220 25% 3% / 0.3), 0px 4px 6px -1px hsl(220 25% 3% / 0.3);\n  --shadow-md: 0px 4px 6px -1px hsl(220 25% 3% / 0.3), 0px 10px 15px -3px hsl(220 25% 3% / 0.3);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 25% 3% / 0.3), 0px 20px 25px -5px hsl(220 25% 3% / 0.3);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 25% 3% / 0.3), 0px 25px 50px -12px hsl(220 25% 3% / 0.4);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 25% 3% / 0.4);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9791},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ChallengeCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Calendar, Clock, Target, TrendingUp, Play, Pause } from \"lucide-react\";\nimport { Challenge } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface ChallengeCardProps {\n  challenge: Challenge;\n  onStart?: (challengeId: string) => void;\n  onPause?: (challengeId: string) => void;\n  onResume?: (challengeId: string) => void;\n  onView?: (challengeId: string) => void;\n}\n\nexport default function ChallengeCard({ challenge, onStart, onPause, onResume, onView }: ChallengeCardProps) {\n  const progressPercentage = (challenge.progress.completedDays / challenge.progress.totalDays) * 100;\n  const taskProgressPercentage = (challenge.progress.completedTasks / challenge.progress.totalTasks) * 100;\n  \n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-chart-1 text-white';\n      case 'completed': return 'bg-chart-1 text-white';\n      case 'paused': return 'bg-chart-2 text-white';\n      case 'archived': return 'bg-muted text-muted-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const handleAction = () => {\n    console.log(`Action triggered for challenge: ${challenge.id}, status: ${challenge.status}`);\n    if (challenge.status === 'active' && onPause) {\n      onPause(challenge.id);\n    } else if (challenge.status === 'paused' && onResume) {\n      onResume(challenge.id);\n    } else if (challenge.status === 'archived' && onStart) {\n      onStart(challenge.id);\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-challenge-${challenge.id}`}>\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"space-y-1\">\n            <CardTitle className=\"text-lg font-semibold\" data-testid={`text-challenge-name-${challenge.id}`}>\n              {challenge.name}\n            </CardTitle>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>{format(new Date(challenge.startDate), 'MMM dd')} - {format(new Date(challenge.endDate), 'MMM dd')}</span>\n            </div>\n          </div>\n          <Badge className={getStatusColor(challenge.status)} data-testid={`badge-status-${challenge.id}`}>\n            {challenge.status}\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"h-4 w-4 text-chart-3\" />\n            <span>{challenge.dailyTimeHours}h/day</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Target className=\"h-4 w-4 text-chart-1\" />\n            <span>{challenge.subjects.length} subjects</span>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span>Progress</span>\n            <span>{challenge.progress.completedDays}/{challenge.progress.totalDays} days</span>\n          </div>\n          <Progress value={progressPercentage} className=\"h-2\" data-testid={`progress-days-${challenge.id}`} />\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span>Tasks</span>\n            <span>{challenge.progress.completedTasks}/{challenge.progress.totalTasks} completed</span>\n          </div>\n          <Progress value={taskProgressPercentage} className=\"h-2\" data-testid={`progress-tasks-${challenge.id}`} />\n        </div>\n        \n        <div className=\"flex items-center gap-2 text-sm\">\n          <TrendingUp className=\"h-4 w-4 text-chart-2\" />\n          <span>Current streak: {challenge.progress.currentStreak} days</span>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"flex-1\"\n            onClick={() => onView?.(challenge.id)}\n            data-testid={`button-view-${challenge.id}`}\n          >\n            View Details\n          </Button>\n          <Button \n            size=\"sm\" \n            className=\"flex-1\"\n            onClick={handleAction}\n            disabled={challenge.status === 'completed'}\n            data-testid={`button-action-${challenge.id}`}\n          >\n            {challenge.status === 'active' && <Pause className=\"h-4 w-4 mr-1\" />}\n            {challenge.status === 'paused' && <Play className=\"h-4 w-4 mr-1\" />}\n            {challenge.status === 'archived' && <Play className=\"h-4 w-4 mr-1\" />}\n            {challenge.status === 'active' ? 'Pause' : \n             challenge.status === 'paused' ? 'Resume' : \n             challenge.status === 'completed' ? 'Completed' : 'Start'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5117},"client/src/components/ChallengeCreationModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Plus, Calendar, Clock, BookOpen } from \"lucide-react\";\nimport { CHALLENGE_TYPES, JEE_SUBJECTS, JEE_TOPICS, InsertChallenge } from \"@shared/schema\";\nimport { addDays, format } from \"date-fns\";\nimport { getTopicsByGradeAndChapter, isCustomTopic } from \"@/lib/topicUtils\";\n\ninterface ChallengeCreationModalProps {\n  onCreateChallenge?: (challenge: InsertChallenge) => void;\n  children?: React.ReactNode;\n}\n\nexport default function ChallengeCreationModal({ onCreateChallenge, children }: ChallengeCreationModalProps) {\n  const [open, setOpen] = useState(false);\n  const [selectedType, setSelectedType] = useState<typeof CHALLENGE_TYPES[number]>(CHALLENGE_TYPES[0]);\n  const [customName, setCustomName] = useState('');\n  const [selectedSubjects, setSelectedSubjects] = useState<string[]>([]);\n  const [selectedTopics, setSelectedTopics] = useState<Record<string, string[]>>({});\n  const [dailyHours, setDailyHours] = useState([4]);\n  const [startDate, setStartDate] = useState(format(new Date(), 'yyyy-MM-dd'));\n\n  const handleSubjectToggle = (subject: string) => {\n    const newSubjects = selectedSubjects.includes(subject)\n      ? selectedSubjects.filter(s => s !== subject)\n      : [...selectedSubjects, subject];\n    \n    setSelectedSubjects(newSubjects);\n    \n    // Remove topics for unselected subjects\n    if (!newSubjects.includes(subject)) {\n      const newTopics = { ...selectedTopics };\n      delete newTopics[subject];\n      setSelectedTopics(newTopics);\n    }\n  };\n\n  const handleTopicToggle = (subject: string, topic: string) => {\n    const currentTopics = selectedTopics[subject] || [];\n    const newTopics = currentTopics.includes(topic)\n      ? currentTopics.filter(t => t !== topic)\n      : [...currentTopics, topic];\n    \n    setSelectedTopics({\n      ...selectedTopics,\n      [subject]: newTopics\n    });\n  };\n\n  const handleCreate = () => {\n    console.log('Creating challenge with:', {\n      type: selectedType,\n      name: customName || selectedType.name,\n      subjects: selectedSubjects,\n      topics: selectedTopics,\n      dailyHours: dailyHours[0],\n      startDate\n    });\n    \n    const challenge: InsertChallenge = {\n      type: selectedType.id,\n      name: customName || selectedType.name,\n      duration: selectedType.duration,\n      subjects: selectedSubjects as any,\n      topics: selectedTopics,\n      startDate,\n      endDate: format(addDays(new Date(startDate), selectedType.duration), 'yyyy-MM-dd'),\n      dailyTimeHours: dailyHours[0],\n      status: 'active'\n    };\n    \n    onCreateChallenge?.(challenge);\n    setOpen(false);\n  };\n\n  const isValidChallenge = selectedSubjects.length > 0 && \n    selectedSubjects.every(subject => (selectedTopics[subject] || []).length > 0);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children || (\n          <Button data-testid=\"button-create-challenge\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Challenge\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New JEE Challenge</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Challenge Type Selection */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-base font-semibold\">Choose Challenge Type</Label>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {CHALLENGE_TYPES.map((type) => (\n                <Card \n                  key={type.id} \n                  className={`cursor-pointer hover-elevate transition-colors ${\n                    selectedType.id === type.id ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => setSelectedType(type)}\n                  data-testid={`card-challenge-type-${type.id}`}\n                >\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">{type.name}</CardTitle>\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-4 w-4\" />\n                        {type.duration} days\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">{type.description}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Custom Name */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"challenge-name\">Custom Challenge Name (Optional)</Label>\n            <Input\n              id=\"challenge-name\"\n              placeholder={selectedType.name}\n              value={customName}\n              onChange={(e) => setCustomName(e.target.value)}\n              data-testid=\"input-challenge-name\"\n            />\n          </div>\n\n          {/* Start Date */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"start-date\">Start Date</Label>\n            <Input\n              id=\"start-date\"\n              type=\"date\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n              data-testid=\"input-start-date\"\n            />\n          </div>\n\n          {/* Daily Study Hours */}\n          <div className=\"space-y-3\">\n            <Label className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              Daily Study Hours: {dailyHours[0]}h\n            </Label>\n            <Slider\n              value={dailyHours}\n              onValueChange={setDailyHours}\n              max={12}\n              min={1}\n              step={1}\n              className=\"w-full\"\n              data-testid=\"slider-daily-hours\"\n            />\n          </div>\n\n          {/* Subject Selection */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-base font-semibold flex items-center gap-2\">\n              <BookOpen className=\"h-4 w-4\" />\n              Select Subjects\n            </Label>\n            <div className=\"flex gap-4\">\n              {JEE_SUBJECTS.map((subject) => (\n                <div key={subject} className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id={subject}\n                    checked={selectedSubjects.includes(subject)}\n                    onCheckedChange={() => handleSubjectToggle(subject)}\n                    data-testid={`checkbox-subject-${subject}`}\n                  />\n                  <Label htmlFor={subject} className=\"text-sm font-medium\">\n                    {subject}\n                  </Label>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Topic Selection */}\n          {selectedSubjects.length > 0 && (\n            <div className=\"space-y-4\">\n              <Label className=\"text-base font-semibold\">Select Topics</Label>\n              {selectedSubjects.map((subject) => {\n                const gradeTopics = getTopicsByGradeAndChapter(subject as 'Physics' | 'Chemistry' | 'Mathematics');\n                return (\n                  <Card key={subject}>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-lg\">{subject}</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <Accordion type=\"multiple\" className=\"w-full\">\n                        {Object.entries(gradeTopics).map(([grade, chapters]) => {\n                          const hasChapters = Object.keys(chapters).length > 0;\n                          if (!hasChapters) return null;\n                          \n                          return (\n                            <AccordionItem key={`${subject}-${grade}`} value={`${subject}-${grade}`}>\n                              <AccordionTrigger \n                                className=\"text-base font-medium\"\n                                data-testid={`accordion-grade-${subject}-${grade}`}\n                              >\n                                <div className=\"flex items-center gap-2\">\n                                  <span>{grade}</span>\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {Object.values(chapters).flat().length} topics\n                                  </Badge>\n                                </div>\n                              </AccordionTrigger>\n                              <AccordionContent>\n                                <div className=\"space-y-4\">\n                                  {Object.entries(chapters).map(([chapter, topics]) => (\n                                    <div key={`${subject}-${chapter}`} className=\"space-y-2\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <h4 className=\"font-medium text-sm text-muted-foreground\">{chapter}</h4>\n                                        <Badge variant=\"secondary\" className=\"text-xs\">\n                                          {topics.length}\n                                        </Badge>\n                                      </div>\n                                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 ml-4\">\n                                        {topics.map((topic) => (\n                                          <div key={topic} className=\"flex items-center space-x-2\">\n                                            <Checkbox \n                                              id={`${subject}-${topic}`}\n                                              checked={(selectedTopics[subject] || []).includes(topic)}\n                                              onCheckedChange={() => handleTopicToggle(subject, topic)}\n                                              data-testid={`checkbox-topic-${subject}-${topic}`}\n                                            />\n                                            <Label \n                                              htmlFor={`${subject}-${topic}`} \n                                              className=\"text-sm leading-tight flex items-center gap-1\"\n                                            >\n                                              {topic}\n                                              {isCustomTopic(subject as 'Physics' | 'Chemistry' | 'Mathematics', topic) && (\n                                                <Badge variant=\"outline\" className=\"text-xs px-1\">\n                                                  Custom\n                                                </Badge>\n                                              )}\n                                            </Label>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </AccordionContent>\n                            </AccordionItem>\n                          );\n                        })}\n                      </Accordion>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n\n          {/* Summary */}\n          {selectedSubjects.length > 0 && (\n            <Card className=\"bg-muted/50\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Challenge Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-semibold\">Duration:</span> {selectedType.duration} days\n                  </div>\n                  <div>\n                    <span className=\"font-semibold\">Daily Hours:</span> {dailyHours[0]}h\n                  </div>\n                  <div>\n                    <span className=\"font-semibold\">Start Date:</span> {format(new Date(startDate), 'MMM dd, yyyy')}\n                  </div>\n                  <div>\n                    <span className=\"font-semibold\">End Date:</span> {format(addDays(new Date(startDate), selectedType.duration), 'MMM dd, yyyy')}\n                  </div>\n                </div>\n                <div>\n                  <span className=\"font-semibold\">Subjects & Topics:</span>\n                  <div className=\"mt-2 space-y-2\">\n                    {selectedSubjects.map((subject) => (\n                      <div key={subject}>\n                        <span className=\"text-sm font-medium\">{subject}:</span>\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {(selectedTopics[subject] || []).map((topic) => (\n                            <Badge key={topic} variant=\"secondary\" className=\"text-xs\">\n                              {topic}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3\">\n            <Button variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleCreate} \n              disabled={!isValidChallenge}\n              data-testid=\"button-create\"\n            >\n              Create Challenge\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14457},"client/src/components/DailyTaskList.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Clock, BookOpen, CheckCircle2, Circle, StickyNote } from \"lucide-react\";\nimport { DailyTask } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface DailyTaskListProps {\n  tasks: DailyTask[];\n  date: string;\n  onTaskToggle?: (taskId: string, completed: boolean) => void;\n  onAddNote?: (taskId: string, note: string) => void;\n}\n\nexport default function DailyTaskList({ tasks, date, onTaskToggle, onAddNote }: DailyTaskListProps) {\n  const [expandedNotes, setExpandedNotes] = useState<Record<string, boolean>>({});\n  const [noteTexts, setNoteTexts] = useState<Record<string, string>>({});\n\n  const completedTasks = tasks.filter(task => task.completed).length;\n  const totalTime = tasks.reduce((acc, task) => acc + task.timeAllotted, 0);\n  const completedTime = tasks.filter(task => task.completed).reduce((acc, task) => acc + task.timeAllotted, 0);\n\n  const getSubjectColor = (subject: string) => {\n    switch (subject) {\n      case 'Physics': return 'bg-chart-3 text-white';\n      case 'Chemistry': return 'bg-chart-1 text-white';\n      case 'Mathematics': return 'bg-chart-2 text-white';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'bg-chart-1 text-white';\n      case 'medium': return 'bg-chart-2 text-white';\n      case 'hard': return 'bg-destructive text-destructive-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const handleTaskToggle = (taskId: string, completed: boolean) => {\n    console.log(`Task ${taskId} ${completed ? 'completed' : 'uncompleted'}`);\n    onTaskToggle?.(taskId, completed);\n  };\n\n  const handleNoteToggle = (taskId: string) => {\n    setExpandedNotes(prev => ({\n      ...prev,\n      [taskId]: !prev[taskId]\n    }));\n  };\n\n  const handleNoteSave = (taskId: string) => {\n    const note = noteTexts[taskId] || '';\n    console.log(`Saving note for task ${taskId}:`, note);\n    onAddNote?.(taskId, note);\n    setExpandedNotes(prev => ({ ...prev, [taskId]: false }));\n  };\n\n  return (\n    <Card data-testid=\"daily-task-list\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            Tasks for {format(new Date(date), 'MMMM dd, yyyy')}\n          </CardTitle>\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <CheckCircle2 className=\"h-4 w-4\" />\n              {completedTasks}/{tasks.length} completed\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-4 w-4\" />\n              {Math.round(completedTime / 60)}h/{Math.round(totalTime / 60)}h\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3\">\n        {tasks.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Circle className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n            <p>No tasks scheduled for this day</p>\n          </div>\n        ) : (\n          tasks.map((task, index) => (\n            <Card \n              key={task.id} \n              className={`hover-elevate transition-all ${\n                task.completed ? 'bg-muted/30' : ''\n              }`}\n              data-testid={`task-card-${task.id}`}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <Checkbox \n                    checked={task.completed}\n                    onCheckedChange={(checked) => handleTaskToggle(task.id, checked as boolean)}\n                    className=\"mt-1\"\n                    data-testid={`checkbox-task-${task.id}`}\n                  />\n                  \n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <div className=\"space-y-1\">\n                        <h4 className={`font-medium ${task.completed ? 'line-through text-muted-foreground' : ''}`}>\n                          {task.topic}\n                        </h4>\n                        <p className={`text-sm ${task.completed ? 'line-through text-muted-foreground' : 'text-muted-foreground'}`}>\n                          {task.description}\n                        </p>\n                      </div>\n                      \n                      <div className=\"flex flex-col gap-1 text-right\">\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          <span className=\"text-xs\">{task.timeAllotted}min</span>\n                        </div>\n                        {task.completedAt && (\n                          <span className=\"text-xs text-chart-1\">✓ Completed</span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={getSubjectColor(task.subject)}>\n                        {task.subject}\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        {task.taskType.replace('-', ' ')}\n                      </Badge>\n                      <Badge className={getDifficultyColor(task.difficulty)}>\n                        {task.difficulty}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => handleNoteToggle(task.id)}\n                        className=\"h-6 px-2 text-xs\"\n                        data-testid={`button-note-${task.id}`}\n                      >\n                        <StickyNote className=\"h-3 w-3 mr-1\" />\n                        {task.notes ? 'Edit Note' : 'Add Note'}\n                      </Button>\n                      {task.notes && (\n                        <span className=\"text-xs text-muted-foreground truncate max-w-[200px]\">\n                          \"{task.notes}\"\n                        </span>\n                      )}\n                    </div>\n                    \n                    {expandedNotes[task.id] && (\n                      <div className=\"space-y-2 pt-2 border-t\">\n                        <Textarea \n                          placeholder=\"Add your notes about this task...\"\n                          value={noteTexts[task.id] || task.notes || ''}\n                          onChange={(e) => setNoteTexts(prev => ({ ...prev, [task.id]: e.target.value }))}\n                          className=\"text-sm\"\n                          rows={3}\n                          data-testid={`textarea-note-${task.id}`}\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button \n                            size=\"sm\" \n                            onClick={() => handleNoteSave(task.id)}\n                            data-testid={`button-save-note-${task.id}`}\n                          >\n                            Save Note\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => handleNoteToggle(task.id)}\n                            data-testid={`button-cancel-note-${task.id}`}\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8296},"client/src/components/DashboardStats.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp, Target, Calendar, Zap } from \"lucide-react\";\n\ninterface DashboardStatsProps {\n  totalChallenges: number;\n  activeChallenges: number;\n  completedChallenges: number;\n  currentStreak: number;\n  totalStudyHours: number;\n  tasksCompleted: number;\n}\n\nexport default function DashboardStats({ \n  totalChallenges, \n  activeChallenges, \n  completedChallenges, \n  currentStreak, \n  totalStudyHours, \n  tasksCompleted \n}: DashboardStatsProps) {\n  const stats = [\n    {\n      title: \"Active Challenges\",\n      value: activeChallenges,\n      total: totalChallenges,\n      icon: Target,\n      color: \"text-chart-1\",\n      bgColor: \"bg-chart-1/10\"\n    },\n    {\n      title: \"Completed Challenges\",\n      value: completedChallenges,\n      total: totalChallenges,\n      icon: TrendingUp,\n      color: \"text-chart-1\",\n      bgColor: \"bg-chart-1/10\"\n    },\n    {\n      title: \"Current Streak\",\n      value: currentStreak,\n      suffix: \"days\",\n      icon: Zap,\n      color: \"text-chart-2\",\n      bgColor: \"bg-chart-2/10\"\n    },\n    {\n      title: \"Study Hours\",\n      value: totalStudyHours,\n      suffix: \"hrs\",\n      icon: Calendar,\n      color: \"text-chart-3\",\n      bgColor: \"bg-chart-3/10\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\" data-testid=\"dashboard-stats\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        return (\n          <Card key={stat.title} className=\"hover-elevate\" data-testid={`stat-card-${index}`}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                {stat.title}\n              </CardTitle>\n              <div className={`p-2 rounded-md ${stat.bgColor}`}>\n                <Icon className={`h-4 w-4 ${stat.color}`} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid={`stat-value-${index}`}>\n                {stat.value}\n                {stat.suffix && <span className=\"text-lg text-muted-foreground ml-1\">{stat.suffix}</span>}\n              </div>\n              {stat.total && (\n                <p className=\"text-xs text-muted-foreground\">\n                  of {stat.total} total\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":2499},"client/src/components/StreakCounter.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Zap, TrendingUp, Calendar } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface StreakCounterProps {\n  currentStreak: number;\n  longestStreak: number;\n  totalDays: number;\n  studiedToday: boolean;\n}\n\nexport default function StreakCounter({ currentStreak, longestStreak, totalDays, studiedToday }: StreakCounterProps) {\n  const streakPercentage = longestStreak > 0 ? (currentStreak / longestStreak) * 100 : 0;\n  \n  return (\n    <Card className=\"hover-elevate\" data-testid=\"streak-counter\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\n          <div className={`p-2 rounded-md ${\n            studiedToday ? 'bg-chart-2/20' : 'bg-muted'\n          }`}>\n            <Zap className={`h-5 w-5 ${\n              studiedToday ? 'text-chart-2' : 'text-muted-foreground'\n            }`} />\n          </div>\n          Study Streak\n          {studiedToday && (\n            <Badge className=\"bg-chart-2 text-white\" data-testid=\"badge-studied-today\">\n              Today ✓\n            </Badge>\n          )}\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"text-center space-y-2\">\n          <motion.div \n            className=\"text-4xl font-bold text-chart-2\"\n            initial={{ scale: 1 }}\n            animate={{ scale: studiedToday ? [1, 1.1, 1] : 1 }}\n            transition={{ duration: 0.5 }}\n            data-testid=\"text-current-streak\"\n          >\n            {currentStreak}\n          </motion.div>\n          <p className=\"text-sm text-muted-foreground\">\n            {currentStreak === 1 ? 'day' : 'days'} current streak\n          </p>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4 text-chart-1\" />\n              <span>Longest Streak</span>\n            </div>\n            <span className=\"font-semibold\" data-testid=\"text-longest-streak\">{longestStreak} days</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4 text-chart-3\" />\n              <span>Total Study Days</span>\n            </div>\n            <span className=\"font-semibold\" data-testid=\"text-total-days\">{totalDays} days</span>\n          </div>\n        </div>\n        \n        {/* Streak Progress Bar */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-xs text-muted-foreground\">\n            <span>Progress to longest</span>\n            <span>{Math.round(streakPercentage)}%</span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <motion.div \n              className=\"bg-chart-2 h-2 rounded-full\"\n              initial={{ width: 0 }}\n              animate={{ width: `${Math.min(streakPercentage, 100)}%` }}\n              transition={{ duration: 1, delay: 0.2 }}\n              data-testid=\"progress-streak\"\n            />\n          </div>\n        </div>\n        \n        {currentStreak === longestStreak && currentStreak > 0 && (\n          <motion.div \n            className=\"text-center p-2 bg-chart-2/10 rounded-md\"\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.5 }}\n            data-testid=\"personal-best-badge\"\n          >\n            <p className=\"text-sm font-medium text-chart-2\">🏆 Personal Best!</p>\n          </motion.div>\n        )}\n        \n        {!studiedToday && currentStreak > 0 && (\n          <motion.div \n            className=\"text-center p-2 bg-chart-2/10 rounded-md border border-chart-2/20\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.3 }}\n            data-testid=\"motivation-message\"\n          >\n            <p className=\"text-sm text-chart-2\">Don't break the streak! Study today to keep it going.</p>\n          </motion.div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4295},"client/src/components/ThemeToggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    // Check for saved theme or default to light\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' || 'light';\n    setTheme(savedTheme);\n    \n    // Apply theme to document\n    if (savedTheme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    console.log(`Theme changed from ${theme} to ${newTheme}`);\n    \n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    \n    if (newTheme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"relative\"\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":1470},"client/src/components/app-sidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter\n} from \"@/components/ui/sidebar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Target, Calendar, TrendingUp, Settings, BookOpen, Zap, Table, FolderTree } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useChallenges } from \"@/contexts/ChallengeContext\";\nimport ThemeToggle from \"./ThemeToggle\";\n\nconst navigationItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Target,\n    description: \"Overview and stats\"\n  },\n  {\n    title: \"My Challenges\",\n    url: \"/challenges\",\n    icon: BookOpen,\n    description: \"Active and completed challenges\"\n  },\n  {\n    title: \"Daily Tasks\",\n    url: \"/tasks\",\n    icon: Calendar,\n    description: \"Today's study tasks\"\n  },\n  {\n    title: \"Task Management\",\n    url: \"/task-management\",\n    icon: Table,\n    description: \"Excel-like task editor\"\n  },\n  {\n    title: \"Progress Tracker\",\n    url: \"/progress\",\n    icon: TrendingUp,\n    description: \"Study analytics\"\n  },\n  {\n    title: \"Streak Counter\",\n    url: \"/streak\",\n    icon: Zap,\n    description: \"Study streaks and motivation\"\n  },\n  {\n    title: \"Topic Management\",\n    url: \"/topic-management\",\n    icon: FolderTree,\n    description: \"Add, edit, and organize topics\"\n  }\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { getChallengeStats } = useChallenges();\n  const stats = getChallengeStats();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex items-center justify-center w-8 h-8 bg-primary rounded-md\">\n            <Target className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"font-semibold text-lg\">JEE Challenge Hub</h2>\n            <p className=\"text-xs text-muted-foreground\">Master Your Preparation</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigationItems.map((item) => {\n                const isActive = location === item.url;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild\n                      className={isActive ? \"bg-sidebar-accent\" : \"\"}\n                      data-testid={`nav-${item.title.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <Link href={item.url}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        \n        <SidebarGroup>\n          <SidebarGroupLabel>Quick Stats</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <div className=\"px-2 space-y-2\">\n              <div className=\"flex items-center justify-between p-2 rounded-md bg-sidebar-accent/50\">\n                <span className=\"text-sm\">Active Challenges</span>\n                <Badge variant=\"secondary\" data-testid=\"badge-active-challenges\">\n                  {stats.active}\n                </Badge>\n              </div>\n              <div className=\"flex items-center justify-between p-2 rounded-md bg-sidebar-accent/50\">\n                <span className=\"text-sm\">Current Streak</span>\n                <Badge className=\"bg-chart-2 text-white\" data-testid=\"badge-current-streak\">\n                  {stats.currentStreak} days\n                </Badge>\n              </div>\n            </div>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      \n      <SidebarFooter className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-sm text-muted-foreground\">Settings</span>\n          </div>\n          <ThemeToggle />\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":4412},"client/src/contexts/ChallengeContext.tsx":{"content":"import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { Challenge, DailyTask, InsertChallenge } from '@shared/schema';\nimport { challengeStorage, taskStorage } from '@/lib/localStorage';\nimport { generateDailyTasksForChallenge, updateChallengeProgress } from '@/lib/taskGenerator';\n\ninterface ChallengeState {\n  challenges: Challenge[];\n  tasks: DailyTask[];\n  loading: boolean;\n  error: string | null;\n}\n\ntype ChallengeAction =\n  | { type: 'LOAD_SUCCESS'; challenges: Challenge[]; tasks: DailyTask[] }\n  | { type: 'LOAD_ERROR'; error: string }\n  | { type: 'ADD_CHALLENGE'; challenge: Challenge }\n  | { type: 'UPDATE_CHALLENGE'; challengeId: string; updates: Partial<Challenge> }\n  | { type: 'DELETE_CHALLENGE'; challengeId: string }\n  | { type: 'ADD_TASKS'; tasks: DailyTask[] }\n  | { type: 'UPDATE_TASK'; taskId: string; updates: Partial<DailyTask> }\n  | { type: 'DELETE_TASK'; taskId: string }\n  | { type: 'REFRESH_PROGRESS'; challengeId: string };\n\nconst initialState: ChallengeState = {\n  challenges: [],\n  tasks: [],\n  loading: true,\n  error: null,\n};\n\nfunction challengeReducer(state: ChallengeState, action: ChallengeAction): ChallengeState {\n  switch (action.type) {\n    case 'LOAD_SUCCESS':\n      return {\n        ...state,\n        challenges: action.challenges,\n        tasks: action.tasks,\n        loading: false,\n        error: null,\n      };\n    case 'LOAD_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case 'ADD_CHALLENGE':\n      return {\n        ...state,\n        challenges: [action.challenge, ...state.challenges],\n      };\n    case 'UPDATE_CHALLENGE':\n      return {\n        ...state,\n        challenges: state.challenges.map(c =>\n          c.id === action.challengeId ? { ...c, ...action.updates } : c\n        ),\n      };\n    case 'DELETE_CHALLENGE':\n      return {\n        ...state,\n        challenges: state.challenges.filter(c => c.id !== action.challengeId),\n        tasks: state.tasks.filter(t => t.challengeId !== action.challengeId),\n      };\n    case 'ADD_TASKS':\n      return {\n        ...state,\n        tasks: [...state.tasks, ...action.tasks],\n      };\n    case 'UPDATE_TASK':\n      return {\n        ...state,\n        tasks: state.tasks.map(t =>\n          t.id === action.taskId ? { ...t, ...action.updates } : t\n        ),\n      };\n    case 'DELETE_TASK':\n      return {\n        ...state,\n        tasks: state.tasks.filter(t => t.id !== action.taskId),\n      };\n    case 'REFRESH_PROGRESS':\n      const challengeToUpdate = state.challenges.find(c => c.id === action.challengeId);\n      if (challengeToUpdate) {\n        const updatedChallenge = updateChallengeProgress(challengeToUpdate, state.tasks);\n        return {\n          ...state,\n          challenges: state.challenges.map(c =>\n            c.id === action.challengeId ? updatedChallenge : c\n          ),\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n}\n\ninterface ChallengeContextType {\n  state: ChallengeState;\n  createChallenge: (challenge: InsertChallenge) => Promise<void>;\n  updateChallenge: (challengeId: string, updates: Partial<Challenge>) => Promise<void>;\n  deleteChallenge: (challengeId: string) => Promise<void>;\n  updateTask: (taskId: string, updates: Partial<DailyTask>) => Promise<void>;\n  addTask: (task: Omit<DailyTask, 'id'>) => Promise<void>;\n  deleteTask: (taskId: string) => Promise<void>;\n  getTasksForDate: (date: string) => DailyTask[];\n  getTasksForChallenge: (challengeId: string) => DailyTask[];\n  getChallengeStats: () => {\n    total: number;\n    active: number;\n    completed: number;\n    paused: number;\n    currentStreak: number;\n    totalStudyHours: number;\n    totalTasksCompleted: number;\n  };\n}\n\nconst ChallengeContext = createContext<ChallengeContextType | undefined>(undefined);\n\nexport function ChallengeProvider({ children }: { children: React.ReactNode }) {\n  const [state, dispatch] = useReducer(challengeReducer, initialState);\n\n  // Load data from localStorage on mount\n  useEffect(() => {\n    try {\n      const challenges = challengeStorage.getAll();\n      const tasks = taskStorage.getAll();\n      \n      // Update progress for all challenges based on current tasks\n      const updatedChallenges = challenges.map(challenge => \n        updateChallengeProgress(challenge, tasks)\n      );\n      \n      // Save updated challenges back to storage\n      if (JSON.stringify(challenges) !== JSON.stringify(updatedChallenges)) {\n        challengeStorage.save(updatedChallenges);\n      }\n      \n      dispatch({ type: 'LOAD_SUCCESS', challenges: updatedChallenges, tasks });\n    } catch (error) {\n      console.error('Failed to load data from localStorage:', error);\n      dispatch({ type: 'LOAD_ERROR', error: 'Failed to load data' });\n    }\n  }, []);\n\n  const createChallenge = async (insertChallenge: InsertChallenge) => {\n    try {\n      // Create challenge with initial progress\n      const challenge: Challenge = {\n        ...insertChallenge,\n        id: `challenge-${Date.now()}`,\n        createdAt: new Date().toISOString(),\n        progress: {\n          completedDays: 0,\n          totalDays: insertChallenge.duration,\n          completedTasks: 0,\n          totalTasks: 0, // Will be updated after tasks are generated\n          currentStreak: 0,\n          longestStreak: 0,\n        },\n      };\n\n      // Generate daily tasks for the challenge\n      const generatedTasks = generateDailyTasksForChallenge(challenge);\n      \n      // Update challenge with correct total tasks count\n      challenge.progress.totalTasks = generatedTasks.length;\n\n      // Save to localStorage\n      challengeStorage.add(challenge);\n      taskStorage.addBatch(generatedTasks);\n\n      // Update state\n      dispatch({ type: 'ADD_CHALLENGE', challenge });\n      dispatch({ type: 'ADD_TASKS', tasks: generatedTasks });\n\n      console.log(`Created challenge \"${challenge.name}\" with ${generatedTasks.length} tasks`);\n    } catch (error) {\n      console.error('Failed to create challenge:', error);\n      throw error;\n    }\n  };\n\n  const updateChallenge = async (challengeId: string, updates: Partial<Challenge>) => {\n    try {\n      challengeStorage.update(challengeId, updates);\n      dispatch({ type: 'UPDATE_CHALLENGE', challengeId, updates });\n      \n      // Refresh progress after update\n      setTimeout(() => {\n        dispatch({ type: 'REFRESH_PROGRESS', challengeId });\n      }, 100);\n    } catch (error) {\n      console.error('Failed to update challenge:', error);\n      throw error;\n    }\n  };\n\n  const deleteChallenge = async (challengeId: string) => {\n    try {\n      challengeStorage.remove(challengeId);\n      taskStorage.removeByChallengeId(challengeId);\n      dispatch({ type: 'DELETE_CHALLENGE', challengeId });\n    } catch (error) {\n      console.error('Failed to delete challenge:', error);\n      throw error;\n    }\n  };\n\n  const updateTask = async (taskId: string, updates: Partial<DailyTask>) => {\n    try {\n      // Add completion timestamp if marking as completed\n      const finalUpdates = { ...updates };\n      if (updates.completed === true) {\n        finalUpdates.completedAt = new Date().toISOString();\n      } else if (updates.completed === false) {\n        delete finalUpdates.completedAt;\n      }\n\n      taskStorage.update(taskId, finalUpdates);\n      dispatch({ type: 'UPDATE_TASK', taskId, updates: finalUpdates });\n\n      // Find the challenge this task belongs to and refresh its progress\n      const task = state.tasks.find(t => t.id === taskId);\n      if (task) {\n        setTimeout(() => {\n          dispatch({ type: 'REFRESH_PROGRESS', challengeId: task.challengeId });\n          challengeStorage.update(task.challengeId, {}); // Trigger storage update\n        }, 100);\n      }\n    } catch (error) {\n      console.error('Failed to update task:', error);\n      throw error;\n    }\n  };\n\n  const addTask = async (taskData: Omit<DailyTask, 'id'>) => {\n    try {\n      const task: DailyTask = {\n        ...taskData,\n        id: `task-${Date.now()}-${Math.random().toString(36).substring(2)}`,\n        completed: false,\n      };\n\n      taskStorage.add(task);\n      dispatch({ type: 'ADD_TASKS', tasks: [task] });\n\n      // Refresh progress for the challenge this task belongs to\n      setTimeout(() => {\n        dispatch({ type: 'REFRESH_PROGRESS', challengeId: task.challengeId });\n        challengeStorage.update(task.challengeId, {}); // Trigger storage update\n      }, 100);\n    } catch (error) {\n      console.error('Failed to add task:', error);\n      throw error;\n    }\n  };\n\n  const deleteTask = async (taskId: string) => {\n    try {\n      // Find the task to get the challenge ID before deleting\n      const task = state.tasks.find(t => t.id === taskId);\n      \n      taskStorage.remove(taskId);\n      dispatch({ type: 'DELETE_TASK', taskId });\n\n      // Refresh progress for the challenge this task belonged to\n      if (task) {\n        setTimeout(() => {\n          dispatch({ type: 'REFRESH_PROGRESS', challengeId: task.challengeId });\n          challengeStorage.update(task.challengeId, {}); // Trigger storage update\n        }, 100);\n      }\n    } catch (error) {\n      console.error('Failed to delete task:', error);\n      throw error;\n    }\n  };\n\n  const getTasksForDate = (date: string): DailyTask[] => {\n    // Build a map of challengeId -> status for efficient lookups\n    const challengeStatusMap = new Map(\n      state.challenges.map(challenge => [challenge.id, challenge.status])\n    );\n\n    return state.tasks.filter(task => {\n      if (task.date !== date) return false;\n      \n      // Check if the challenge exists and is not paused\n      const challengeStatus = challengeStatusMap.get(task.challengeId);\n      return challengeStatus && challengeStatus !== 'paused';\n    });\n  };\n\n  const getTasksForChallenge = (challengeId: string): DailyTask[] => {\n    return state.tasks.filter(task => task.challengeId === challengeId);\n  };\n\n  const getChallengeStats = () => {\n    const { challenges } = state;\n    const active = challenges.filter(c => c.status === 'active');\n    const completed = challenges.filter(c => c.status === 'completed');\n    const paused = challenges.filter(c => c.status === 'paused');\n    \n    const currentStreak = Math.max(0, ...challenges.map(c => c.progress.currentStreak));\n    const totalStudyHours = challenges.reduce((acc, c) => \n      acc + (c.progress.completedDays * c.dailyTimeHours), 0\n    );\n    const totalTasksCompleted = challenges.reduce((acc, c) => \n      acc + c.progress.completedTasks, 0\n    );\n\n    return {\n      total: challenges.length,\n      active: active.length,\n      completed: completed.length,\n      paused: paused.length,\n      currentStreak,\n      totalStudyHours,\n      totalTasksCompleted,\n    };\n  };\n\n  const value: ChallengeContextType = {\n    state,\n    createChallenge,\n    updateChallenge,\n    deleteChallenge,\n    updateTask,\n    addTask,\n    deleteTask,\n    getTasksForDate,\n    getTasksForChallenge,\n    getChallengeStats,\n  };\n\n  return (\n    <ChallengeContext.Provider value={value}>\n      {children}\n    </ChallengeContext.Provider>\n  );\n}\n\nexport function useChallenges() {\n  const context = useContext(ChallengeContext);\n  if (context === undefined) {\n    throw new Error('useChallenges must be used within a ChallengeProvider');\n  }\n  return context;\n}","size_bytes":11314},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/localStorage.ts":{"content":"import { Challenge, DailyTask } from \"@shared/schema\";\n\nconst STORAGE_KEYS = {\n  CHALLENGES: 'jee-challenges',\n  TASKS: 'jee-tasks',\n  SETTINGS: 'jee-settings',\n  TOPICS: 'jee-custom-topics',\n  CHAPTERS: 'jee-custom-chapters'\n} as const;\n\nexport interface StorageSettings {\n  theme: 'light' | 'dark';\n  userId: string;\n}\n\nexport interface CustomTopicWithClass {\n  name: string;\n  class: '11th' | '12th';\n}\n\nexport interface CustomTopics {\n  Physics: CustomTopicWithClass[];\n  Chemistry: CustomTopicWithClass[];\n  Mathematics: CustomTopicWithClass[];\n}\n\nexport interface CustomChapters {\n  Physics: { [chapter: string]: string[] };\n  Chemistry: { [chapter: string]: string[] };\n  Mathematics: { [chapter: string]: string[] };\n}\n\nexport interface TopicCategory {\n  id: string;\n  name: string;\n  subject: 'Physics' | 'Chemistry' | 'Mathematics';\n  topics: string[];\n}\n\n// Challenge operations\nexport const challengeStorage = {\n  getAll(): Challenge[] {\n    try {\n      const data = localStorage.getItem(STORAGE_KEYS.CHALLENGES);\n      return data ? JSON.parse(data) : [];\n    } catch (error) {\n      console.error('Failed to load challenges from localStorage:', error);\n      return [];\n    }\n  },\n\n  save(challenges: Challenge[]): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.CHALLENGES, JSON.stringify(challenges));\n    } catch (error) {\n      console.error('Failed to save challenges to localStorage:', error);\n    }\n  },\n\n  add(challenge: Challenge): Challenge[] {\n    const challenges = this.getAll();\n    challenges.unshift(challenge);\n    this.save(challenges);\n    return challenges;\n  },\n\n  update(challengeId: string, updates: Partial<Challenge>): Challenge[] {\n    const challenges = this.getAll();\n    const index = challenges.findIndex(c => c.id === challengeId);\n    if (index !== -1) {\n      challenges[index] = { ...challenges[index], ...updates };\n      this.save(challenges);\n    }\n    return challenges;\n  },\n\n  remove(challengeId: string): Challenge[] {\n    const challenges = this.getAll().filter(c => c.id !== challengeId);\n    this.save(challenges);\n    return challenges;\n  },\n\n  getById(challengeId: string): Challenge | undefined {\n    return this.getAll().find(c => c.id === challengeId);\n  }\n};\n\n// Task operations\nexport const taskStorage = {\n  getAll(): DailyTask[] {\n    try {\n      const data = localStorage.getItem(STORAGE_KEYS.TASKS);\n      return data ? JSON.parse(data) : [];\n    } catch (error) {\n      console.error('Failed to load tasks from localStorage:', error);\n      return [];\n    }\n  },\n\n  save(tasks: DailyTask[]): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.TASKS, JSON.stringify(tasks));\n    } catch (error) {\n      console.error('Failed to save tasks to localStorage:', error);\n    }\n  },\n\n  getByDate(date: string): DailyTask[] {\n    return this.getAll().filter(task => task.date === date);\n  },\n\n  getByChallengeId(challengeId: string): DailyTask[] {\n    return this.getAll().filter(task => task.challengeId === challengeId);\n  },\n\n  add(task: DailyTask): DailyTask[] {\n    const tasks = this.getAll();\n    tasks.push(task);\n    this.save(tasks);\n    return tasks;\n  },\n\n  addBatch(newTasks: DailyTask[]): DailyTask[] {\n    const tasks = this.getAll();\n    tasks.push(...newTasks);\n    this.save(tasks);\n    return tasks;\n  },\n\n  update(taskId: string, updates: Partial<DailyTask>): DailyTask[] {\n    const tasks = this.getAll();\n    const index = tasks.findIndex(t => t.id === taskId);\n    if (index !== -1) {\n      tasks[index] = { ...tasks[index], ...updates };\n      \n      // Update completion timestamp if task is being marked as completed\n      if (updates.completed === true && !tasks[index].completedAt) {\n        tasks[index].completedAt = new Date().toISOString();\n      } else if (updates.completed === false) {\n        delete tasks[index].completedAt;\n      }\n      \n      this.save(tasks);\n    }\n    return tasks;\n  },\n\n  remove(taskId: string): DailyTask[] {\n    const tasks = this.getAll().filter(t => t.id !== taskId);\n    this.save(tasks);\n    return tasks;\n  },\n\n  removeByChallengeId(challengeId: string): DailyTask[] {\n    const tasks = this.getAll().filter(t => t.challengeId !== challengeId);\n    this.save(tasks);\n    return tasks;\n  }\n};\n\n// Settings operations\nexport const settingsStorage = {\n  get(): StorageSettings {\n    try {\n      const data = localStorage.getItem(STORAGE_KEYS.SETTINGS);\n      return data ? JSON.parse(data) : {\n        theme: 'light',\n        userId: `user-${Date.now()}`\n      };\n    } catch (error) {\n      console.error('Failed to load settings from localStorage:', error);\n      return {\n        theme: 'light',\n        userId: `user-${Date.now()}`\n      };\n    }\n  },\n\n  save(settings: StorageSettings): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(settings));\n    } catch (error) {\n      console.error('Failed to save settings to localStorage:', error);\n    }\n  },\n\n  updateTheme(theme: 'light' | 'dark'): StorageSettings {\n    const settings = this.get();\n    settings.theme = theme;\n    this.save(settings);\n    return settings;\n  }\n};\n\n// Custom Topics operations\nexport const topicStorage = {\n  getAll(): CustomTopics {\n    try {\n      const data = localStorage.getItem(STORAGE_KEYS.TOPICS);\n      if (data) {\n        const parsed = JSON.parse(data);\n        // Handle migration from old string[] format to new CustomTopicWithClass[] format\n        const migrated: CustomTopics = {\n          Physics: [],\n          Chemistry: [],\n          Mathematics: []\n        };\n        \n        Object.keys(parsed).forEach((subject) => {\n          const subjectKey = subject as keyof CustomTopics;\n          if (Array.isArray(parsed[subjectKey])) {\n            parsed[subjectKey].forEach((item: any) => {\n              if (typeof item === 'string') {\n                // Old format - migrate to new format with default 12th class\n                migrated[subjectKey].push({ name: item, class: '12th' });\n              } else if (item && typeof item === 'object' && item.name && item.class) {\n                // New format\n                migrated[subjectKey].push(item);\n              }\n            });\n          }\n        });\n        return migrated;\n      }\n      return { Physics: [], Chemistry: [], Mathematics: [] };\n    } catch (error) {\n      console.error('Failed to load custom topics from localStorage:', error);\n      return { Physics: [], Chemistry: [], Mathematics: [] };\n    }\n  },\n\n  save(topics: CustomTopics): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.TOPICS, JSON.stringify(topics));\n    } catch (error) {\n      console.error('Failed to save custom topics to localStorage:', error);\n    }\n  },\n\n  addTopic(subject: 'Physics' | 'Chemistry' | 'Mathematics', topic: string, classLevel: '11th' | '12th' = '12th'): CustomTopics {\n    const topics = this.getAll();\n    const existingTopic = topics[subject].find(t => t.name === topic);\n    if (!existingTopic) {\n      topics[subject].push({ name: topic, class: classLevel });\n      this.save(topics);\n    }\n    return topics;\n  },\n\n  updateTopic(subject: 'Physics' | 'Chemistry' | 'Mathematics', oldTopic: string, newTopic: string, newClass?: '11th' | '12th'): CustomTopics {\n    const topics = this.getAll();\n    const index = topics[subject].findIndex(t => t.name === oldTopic);\n    if (index !== -1) {\n      topics[subject][index] = {\n        name: newTopic,\n        class: newClass || topics[subject][index].class\n      };\n      this.save(topics);\n    }\n    return topics;\n  },\n\n  removeTopic(subject: 'Physics' | 'Chemistry' | 'Mathematics', topic: string): CustomTopics {\n    const topics = this.getAll();\n    topics[subject] = topics[subject].filter(t => t.name !== topic);\n    this.save(topics);\n    return topics;\n  },\n\n  addMultipleTopics(subject: 'Physics' | 'Chemistry' | 'Mathematics', newTopics: string[], classLevel: '11th' | '12th' = '12th'): CustomTopics {\n    const topics = this.getAll();\n    newTopics.forEach(topic => {\n      const existingTopic = topics[subject].find(t => t.name === topic);\n      if (!existingTopic) {\n        topics[subject].push({ name: topic, class: classLevel });\n      }\n    });\n    this.save(topics);\n    return topics;\n  },\n\n  clear(): CustomTopics {\n    const emptyTopics = { Physics: [], Chemistry: [], Mathematics: [] };\n    this.save(emptyTopics);\n    return emptyTopics;\n  },\n\n  // Helper method to get topics for a specific class\n  getTopicsForClass(subject: 'Physics' | 'Chemistry' | 'Mathematics', classLevel: '11th' | '12th'): string[] {\n    const topics = this.getAll();\n    return topics[subject]\n      .filter(topic => topic.class === classLevel)\n      .map(topic => topic.name);\n  },\n\n  // Helper method to get all topic names (for backward compatibility)\n  getTopicNames(subject: 'Physics' | 'Chemistry' | 'Mathematics'): string[] {\n    const topics = this.getAll();\n    return topics[subject].map(topic => topic.name);\n  }\n};\n\n// Custom Chapters operations\nexport const chapterStorage = {\n  getAll(): CustomChapters {\n    try {\n      const data = localStorage.getItem(STORAGE_KEYS.CHAPTERS);\n      return data ? JSON.parse(data) : { Physics: {}, Chemistry: {}, Mathematics: {} };\n    } catch (error) {\n      console.error('Failed to load custom chapters from localStorage:', error);\n      return { Physics: {}, Chemistry: {}, Mathematics: {} };\n    }\n  },\n\n  save(chapters: CustomChapters): void {\n    try {\n      localStorage.setItem(STORAGE_KEYS.CHAPTERS, JSON.stringify(chapters));\n    } catch (error) {\n      console.error('Failed to save custom chapters to localStorage:', error);\n    }\n  },\n\n  addChapter(subject: 'Physics' | 'Chemistry' | 'Mathematics', chapterName: string): CustomChapters {\n    const chapters = this.getAll();\n    if (!chapters[subject][chapterName]) {\n      chapters[subject][chapterName] = [];\n      this.save(chapters);\n    }\n    return chapters;\n  },\n\n  updateChapter(subject: 'Physics' | 'Chemistry' | 'Mathematics', oldName: string, newName: string): CustomChapters {\n    const chapters = this.getAll();\n    if (chapters[subject][oldName] && oldName !== newName) {\n      chapters[subject][newName] = chapters[subject][oldName];\n      delete chapters[subject][oldName];\n      this.save(chapters);\n    }\n    return chapters;\n  },\n\n  removeChapter(subject: 'Physics' | 'Chemistry' | 'Mathematics', chapterName: string): CustomChapters {\n    const chapters = this.getAll();\n    if (chapters[subject][chapterName]) {\n      delete chapters[subject][chapterName];\n      this.save(chapters);\n    }\n    return chapters;\n  },\n\n  addTopicToChapter(subject: 'Physics' | 'Chemistry' | 'Mathematics', chapterName: string, topic: string): CustomChapters {\n    const chapters = this.getAll();\n    if (!chapters[subject][chapterName]) {\n      chapters[subject][chapterName] = [];\n    }\n    if (!chapters[subject][chapterName].includes(topic)) {\n      chapters[subject][chapterName].push(topic);\n      this.save(chapters);\n    }\n    return chapters;\n  },\n\n  removeTopicFromChapter(subject: 'Physics' | 'Chemistry' | 'Mathematics', chapterName: string, topic: string): CustomChapters {\n    const chapters = this.getAll();\n    if (chapters[subject][chapterName]) {\n      chapters[subject][chapterName] = chapters[subject][chapterName].filter(t => t !== topic);\n      this.save(chapters);\n    }\n    return chapters;\n  },\n\n  clear(): CustomChapters {\n    const emptyChapters = { Physics: {}, Chemistry: {}, Mathematics: {} };\n    this.save(emptyChapters);\n    return emptyChapters;\n  }\n};\n\n// Utility functions\nexport const clearAllData = (): void => {\n  try {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      localStorage.removeItem(key);\n    });\n    console.log('All JEE Challenge Hub data cleared from localStorage');\n  } catch (error) {\n    console.error('Failed to clear localStorage:', error);\n  }\n};\n\nexport const exportData = () => {\n  return {\n    challenges: challengeStorage.getAll(),\n    tasks: taskStorage.getAll(),\n    settings: settingsStorage.get(),\n    topics: topicStorage.getAll(),\n    chapters: chapterStorage.getAll(),\n    exportDate: new Date().toISOString()\n  };\n};\n\nexport const importData = (data: ReturnType<typeof exportData>) => {\n  try {\n    if (data.challenges) challengeStorage.save(data.challenges);\n    if (data.tasks) taskStorage.save(data.tasks);\n    if (data.settings) settingsStorage.save(data.settings);\n    if (data.topics) topicStorage.save(data.topics);\n    if (data.chapters) chapterStorage.save(data.chapters);\n    console.log('Data imported successfully');\n  } catch (error) {\n    console.error('Failed to import data:', error);\n  }\n};","size_bytes":12594},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/taskGenerator.ts":{"content":"import { Challenge, DailyTask, JEE_TOPICS } from \"@shared/schema\";\nimport { addDays, format, differenceInDays } from \"date-fns\";\n\ninterface TaskTemplate {\n  subject: 'Physics' | 'Chemistry' | 'Mathematics';\n  topic: string;\n  taskType: 'theory' | 'practice' | 'revision' | 'mock-test' | 'dpp' | 'concept-mastery' | 'intensive-practice' | 'exam-simulation' | 'formula-practice' | 'previous-year' | 'speed-drill' | 'video-lecture' | 'concept-mapping';\n  description: string;\n  timeAllotted: number; // in minutes\n  difficulty: 'easy' | 'medium' | 'hard';\n}\n\n// Task generation based on challenge type and topics\nconst generateTasksForTopic = (\n  challengeType: string,\n  subject: 'Physics' | 'Chemistry' | 'Mathematics',\n  topic: string,\n  dailyTimeHours: number\n): TaskTemplate[] => {\n  const tasks: TaskTemplate[] = [];\n  const totalDailyMinutes = dailyTimeHours * 60;\n\n  switch (challengeType) {\n    case 'revision':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'theory',\n          description: `Review ${topic} concepts and formulas`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.4),\n          difficulty: 'medium'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'practice',\n          description: `Solve practice problems on ${topic}`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.6),\n          difficulty: 'medium'\n        }\n      );\n      break;\n\n    case 'dpp':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'dpp',\n          description: `Daily Practice Problems - ${topic}`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.8),\n          difficulty: 'hard'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'revision',\n          description: `Quick revision of ${topic} mistakes`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.2),\n          difficulty: 'easy'\n        }\n      );\n      break;\n\n    case 'backlog':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'theory',\n          description: `Complete ${topic} chapter from scratch`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.5),\n          difficulty: 'medium'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'practice',\n          description: `Solve all ${topic} exercises`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.5),\n          difficulty: 'hard'\n        }\n      );\n      break;\n\n    case 'mock':\n      if (Math.random() > 0.7) { // 30% chance for mock test day\n        tasks.push({\n          subject,\n          topic,\n          taskType: 'mock-test',\n          description: `Full length mock test - ${subject}`,\n          timeAllotted: totalDailyMinutes,\n          difficulty: 'hard'\n        });\n      } else {\n        tasks.push(\n          {\n            subject,\n            topic,\n            taskType: 'revision',\n            description: `Strategic revision of ${topic}`,\n            timeAllotted: Math.floor(totalDailyMinutes * 0.4),\n            difficulty: 'medium'\n          },\n          {\n            subject,\n            topic,\n            taskType: 'practice',\n            description: `Timed practice - ${topic}`,\n            timeAllotted: Math.floor(totalDailyMinutes * 0.6),\n            difficulty: 'hard'\n          }\n        );\n      }\n      break;\n\n    case 'weak-areas':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'video-lecture',\n          description: `Watch conceptual video on ${topic} fundamentals`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.3),\n          difficulty: 'easy'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'practice',\n          description: `Intensive practice on ${topic} problem areas`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.7),\n          difficulty: 'hard'\n        }\n      );\n      break;\n\n    case 'intensive-practice':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'speed-drill',\n          description: `Speed solving drill - ${topic} (time pressure)`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.6),\n          difficulty: 'hard'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'intensive-practice',\n          description: `High-intensity problem marathon - ${topic}`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.4),\n          difficulty: 'hard'\n        }\n      );\n      break;\n\n    case 'concept-mastery':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'concept-mapping',\n          description: `Create concept map for ${topic} connections`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.3),\n          difficulty: 'medium'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'concept-mastery',\n          description: `Deep conceptual study of ${topic} principles`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.4),\n          difficulty: 'medium'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'practice',\n          description: `Apply ${topic} concepts to challenging problems`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.3),\n          difficulty: 'hard'\n        }\n      );\n      break;\n\n    case 'exam-simulation':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'exam-simulation',\n          description: `JEE-style exam simulation - ${topic} section`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.8),\n          difficulty: 'hard'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'revision',\n          description: `Quick review of ${topic} exam mistakes`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.2),\n          difficulty: 'medium'\n        }\n      );\n      break;\n\n    case 'formula-sprint':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'formula-practice',\n          description: `Formula derivation and memorization - ${topic}`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.6),\n          difficulty: 'medium'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'speed-drill',\n          description: `Quick formula application - ${topic}`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.4),\n          difficulty: 'easy'\n        }\n      );\n      break;\n\n    case 'previous-years':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'previous-year',\n          description: `Solve JEE previous year questions - ${topic}`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.7),\n          difficulty: 'hard'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'revision',\n          description: `Analyze ${topic} question patterns and solutions`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.3),\n          difficulty: 'medium'\n        }\n      );\n      break;\n\n    case 'speed-accuracy':\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'speed-drill',\n          description: `Speed practice - ${topic} (accuracy focus)`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.5),\n          difficulty: 'medium'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'intensive-practice',\n          description: `Timed problem solving - ${topic}`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.5),\n          difficulty: 'hard'\n        }\n      );\n      break;\n\n    default:\n      // full-syllabus or default\n      tasks.push(\n        {\n          subject,\n          topic,\n          taskType: 'theory',\n          description: `Study ${topic} concepts thoroughly`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.4),\n          difficulty: 'medium'\n        },\n        {\n          subject,\n          topic,\n          taskType: 'practice',\n          description: `Solve ${topic} problems and examples`,\n          timeAllotted: Math.floor(totalDailyMinutes * 0.6),\n          difficulty: 'medium'\n        }\n      );\n  }\n\n  return tasks;\n};\n\nexport const generateDailyTasksForChallenge = (challenge: Challenge): DailyTask[] => {\n  const tasks: DailyTask[] = [];\n  const startDate = new Date(challenge.startDate);\n  const endDate = new Date(challenge.endDate);\n  const totalDays = differenceInDays(endDate, startDate) + 1;\n\n  // Get all topics from all subjects\n  const allTopics: Array<{ subject: 'Physics' | 'Chemistry' | 'Mathematics'; topic: string }> = [];\n  challenge.subjects.forEach(subject => {\n    const subjectTopics = challenge.topics[subject] || [];\n    subjectTopics.forEach(topic => {\n      allTopics.push({ subject: subject as any, topic });\n    });\n  });\n\n  if (allTopics.length === 0) {\n    console.warn('No topics found for challenge:', challenge.id);\n    return tasks;\n  }\n\n  // Distribute topics across days\n  for (let dayIndex = 0; dayIndex < totalDays; dayIndex++) {\n    const currentDate = addDays(startDate, dayIndex);\n    const dateString = format(currentDate, 'yyyy-MM-dd');\n    \n    // Select topic(s) for this day (cycle through available topics)\n    const topicsForDay = allTopics.filter((_, index) => index % totalDays === dayIndex % allTopics.length);\n    \n    if (topicsForDay.length === 0) {\n      // Fallback: use the first available topic\n      topicsForDay.push(allTopics[dayIndex % allTopics.length]);\n    }\n\n    // Generate tasks for each selected topic\n    topicsForDay.forEach(({ subject, topic }) => {\n      const taskTemplates = generateTasksForTopic(\n        challenge.type,\n        subject,\n        topic,\n        challenge.dailyTimeHours\n      );\n\n      taskTemplates.forEach((template, templateIndex) => {\n        const task: DailyTask = {\n          id: `${challenge.id}-${dateString}-${subject}-${templateIndex}`,\n          challengeId: challenge.id,\n          date: dateString,\n          subject: template.subject,\n          topic: template.topic,\n          taskType: template.taskType,\n          description: template.description,\n          timeAllotted: template.timeAllotted,\n          completed: false,\n          difficulty: template.difficulty\n        };\n\n        tasks.push(task);\n      });\n    });\n  }\n\n  console.log(`Generated ${tasks.length} tasks for challenge: ${challenge.name}`);\n  return tasks;\n};\n\n// Utility function to update challenge progress based on completed tasks\nexport const updateChallengeProgress = (challenge: Challenge, allTasks: DailyTask[]): Challenge => {\n  const challengeTasks = allTasks.filter(task => task.challengeId === challenge.id);\n  const completedTasks = challengeTasks.filter(task => task.completed);\n  \n  // Calculate completed days (days with at least one completed task)\n  const completedDays = new Set(\n    completedTasks.map(task => task.date)\n  ).size;\n\n  // Calculate current streak (consecutive days with completed tasks from most recent)\n  const today = format(new Date(), 'yyyy-MM-dd');\n  const challengeDates = [];\n  const startDate = new Date(challenge.startDate);\n  const endDate = new Date(challenge.endDate);\n  \n  for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n    challengeDates.push(format(d, 'yyyy-MM-dd'));\n  }\n  \n  let currentStreak = 0;\n  let longestStreak = 0;\n  let tempStreak = 0;\n  \n  // Calculate streaks\n  const completedDateSet = new Set(completedTasks.map(task => task.date));\n  \n  for (const date of challengeDates.reverse()) {\n    if (completedDateSet.has(date)) {\n      if (date <= today) {\n        if (currentStreak === 0 || challengeDates[challengeDates.indexOf(date) - 1] && completedDateSet.has(challengeDates[challengeDates.indexOf(date) - 1])) {\n          currentStreak++;\n        }\n      }\n      tempStreak++;\n      longestStreak = Math.max(longestStreak, tempStreak);\n    } else {\n      if (date <= today) {\n        currentStreak = 0;\n      }\n      tempStreak = 0;\n    }\n  }\n\n  return {\n    ...challenge,\n    progress: {\n      completedDays,\n      totalDays: challenge.duration,\n      completedTasks: completedTasks.length,\n      totalTasks: challengeTasks.length,\n      currentStreak,\n      longestStreak: Math.max(challenge.progress.longestStreak, longestStreak)\n    }\n  };\n};","size_bytes":12364},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Challenges.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Plus, Target, CheckCircle2, Pause, Archive } from \"lucide-react\";\nimport { useChallenges } from \"@/contexts/ChallengeContext\";\nimport ChallengeCard from \"@/components/ChallengeCard\";\nimport ChallengeCreationModal from \"@/components/ChallengeCreationModal\";\nimport { InsertChallenge } from \"@shared/schema\";\n\nexport default function Challenges() {\n  const { state, createChallenge, updateChallenge } = useChallenges();\n  const { challenges, loading } = state;\n  \n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\" data-testid=\"loading-challenges\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const activeChallenges = challenges.filter(c => c.status === 'active');\n  const pausedChallenges = challenges.filter(c => c.status === 'paused');\n  const completedChallenges = challenges.filter(c => c.status === 'completed');\n  const archivedChallenges = challenges.filter(c => c.status === 'archived');\n\n  const handleCreateChallenge = async (newChallenge: InsertChallenge) => {\n    try {\n      await createChallenge(newChallenge);\n    } catch (error) {\n      console.error('Failed to create challenge:', error);\n    }\n  };\n\n  const handleChallengeAction = async (challengeId: string, action: string) => {\n    try {\n      const updates: any = {};\n      if (action === 'pause') updates.status = 'paused';\n      if (action === 'resume' || action === 'start') updates.status = 'active';\n      \n      await updateChallenge(challengeId, updates);\n    } catch (error) {\n      console.error(`Failed to ${action} challenge:`, error);\n    }\n  };\n\n  const EmptyState = ({ title, description, icon: Icon }: { title: string, description: string, icon: any }) => (\n    <Card className=\"text-center py-12\">\n      <CardContent>\n        <Icon className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n        <h3 className=\"text-lg font-semibold mb-2\">{title}</h3>\n        <p className=\"text-muted-foreground\">{description}</p>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"challenges-page\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">My Challenges</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage all your JEE preparation challenges in one place\n          </p>\n        </div>\n        <ChallengeCreationModal onCreateChallenge={handleCreateChallenge}>\n          <Button data-testid=\"button-create-challenge\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Challenge\n          </Button>\n        </ChallengeCreationModal>\n      </div>\n\n      {/* Challenge Tabs */}\n      <Tabs defaultValue=\"active\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"active\" className=\"flex items-center gap-2\" data-testid=\"tab-active\">\n            <Target className=\"h-4 w-4\" />\n            Active ({activeChallenges.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"paused\" className=\"flex items-center gap-2\" data-testid=\"tab-paused\">\n            <Pause className=\"h-4 w-4\" />\n            Paused ({pausedChallenges.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"completed\" className=\"flex items-center gap-2\" data-testid=\"tab-completed\">\n            <CheckCircle2 className=\"h-4 w-4\" />\n            Completed ({completedChallenges.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"archived\" className=\"flex items-center gap-2\" data-testid=\"tab-archived\">\n            <Archive className=\"h-4 w-4\" />\n            Archived ({archivedChallenges.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"active\" className=\"space-y-4\">\n          {activeChallenges.length > 0 ? (\n            <div className=\"grid gap-4\">\n              {activeChallenges.map((challenge) => (\n                <ChallengeCard\n                  key={challenge.id}\n                  challenge={challenge}\n                  onStart={(id) => handleChallengeAction(id, 'start')}\n                  onPause={(id) => handleChallengeAction(id, 'pause')}\n                  onResume={(id) => handleChallengeAction(id, 'resume')}\n                  onView={(id) => console.log('View challenge:', id)}\n                />\n              ))}\n            </div>\n          ) : (\n            <EmptyState\n              title=\"No Active Challenges\"\n              description=\"Create a new challenge to start your focused JEE preparation.\"\n              icon={Target}\n            />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"paused\" className=\"space-y-4\">\n          {pausedChallenges.length > 0 ? (\n            <div className=\"grid gap-4\">\n              {pausedChallenges.map((challenge) => (\n                <ChallengeCard\n                  key={challenge.id}\n                  challenge={challenge}\n                  onStart={(id) => handleChallengeAction(id, 'start')}\n                  onPause={(id) => handleChallengeAction(id, 'pause')}\n                  onResume={(id) => handleChallengeAction(id, 'resume')}\n                  onView={(id) => console.log('View challenge:', id)}\n                />\n              ))}\n            </div>\n          ) : (\n            <EmptyState\n              title=\"No Paused Challenges\"\n              description=\"Challenges you pause will appear here for easy resumption.\"\n              icon={Pause}\n            />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"completed\" className=\"space-y-4\">\n          {completedChallenges.length > 0 ? (\n            <div className=\"grid gap-4\">\n              {completedChallenges.map((challenge) => (\n                <ChallengeCard\n                  key={challenge.id}\n                  challenge={challenge}\n                  onView={(id) => console.log('View challenge:', id)}\n                />\n              ))}\n            </div>\n          ) : (\n            <EmptyState\n              title=\"No Completed Challenges\"\n              description=\"Challenges you complete will appear here as achievements.\"\n              icon={CheckCircle2}\n            />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"archived\" className=\"space-y-4\">\n          {archivedChallenges.length > 0 ? (\n            <div className=\"grid gap-4\">\n              {archivedChallenges.map((challenge) => (\n                <ChallengeCard\n                  key={challenge.id}\n                  challenge={challenge}\n                  onStart={(id) => handleChallengeAction(id, 'start')}\n                  onView={(id) => console.log('View challenge:', id)}\n                />\n              ))}\n            </div>\n          ) : (\n            <EmptyState\n              title=\"No Archived Challenges\"\n              description=\"Challenges you archive for later will appear here.\"\n              icon={Archive}\n            />\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":7247},"client/src/pages/Dashboard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, BookOpen, Calendar, Target } from \"lucide-react\";\nimport { useChallenges } from \"@/contexts/ChallengeContext\";\nimport DashboardStats from \"@/components/DashboardStats\";\nimport ChallengeCard from \"@/components/ChallengeCard\";\nimport ChallengeCreationModal from \"@/components/ChallengeCreationModal\";\nimport StreakCounter from \"@/components/StreakCounter\";\nimport { InsertChallenge } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { state, createChallenge, updateChallenge, getChallengeStats } = useChallenges();\n  const { challenges, loading } = state;\n  \n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\" data-testid=\"loading-dashboard\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const activeChallenges = challenges.filter(c => c.status === 'active');\n  const completedChallenges = challenges.filter(c => c.status === 'completed');\n  const stats = getChallengeStats();\n\n  const handleCreateChallenge = async (newChallenge: InsertChallenge) => {\n    try {\n      await createChallenge(newChallenge);\n    } catch (error) {\n      console.error('Failed to create challenge:', error);\n    }\n  };\n\n  const handleChallengeAction = async (challengeId: string, action: string) => {\n    try {\n      const updates: any = {};\n      if (action === 'pause') updates.status = 'paused';\n      if (action === 'resume' || action === 'start') updates.status = 'active';\n      \n      await updateChallenge(challengeId, updates);\n    } catch (error) {\n      console.error(`Failed to ${action} challenge:`, error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"dashboard-page\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track your JEE preparation progress and manage challenges\n          </p>\n        </div>\n        <ChallengeCreationModal onCreateChallenge={handleCreateChallenge}>\n          <Button data-testid=\"button-create-challenge-header\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Challenge\n          </Button>\n        </ChallengeCreationModal>\n      </div>\n\n      {/* Stats Overview */}\n      <DashboardStats\n        totalChallenges={stats.total}\n        activeChallenges={stats.active}\n        completedChallenges={stats.completed}\n        currentStreak={stats.currentStreak}\n        totalStudyHours={stats.totalStudyHours}\n        tasksCompleted={stats.totalTasksCompleted}\n      />\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Challenges Section */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Active Challenges */}\n          {activeChallenges.length > 0 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5 text-chart-1\" />\n                <h2 className=\"text-xl font-semibold\">Active Challenges</h2>\n                <span className=\"text-sm text-muted-foreground\">({activeChallenges.length})</span>\n              </div>\n              <div className=\"grid gap-4\">\n                {activeChallenges.map((challenge) => (\n                  <ChallengeCard\n                    key={challenge.id}\n                    challenge={challenge}\n                    onStart={(id) => handleChallengeAction(id, 'start')}\n                    onPause={(id) => handleChallengeAction(id, 'pause')}\n                    onResume={(id) => handleChallengeAction(id, 'resume')}\n                    onView={(id) => console.log('View challenge:', id)}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Recent Challenges */}\n          {completedChallenges.length > 0 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-5 w-5 text-chart-1\" />\n                <h2 className=\"text-xl font-semibold\">Recent Challenges</h2>\n              </div>\n              <div className=\"grid gap-4\">\n                {completedChallenges.slice(0, 2).map((challenge) => (\n                  <ChallengeCard\n                    key={challenge.id}\n                    challenge={challenge}\n                    onView={(id) => console.log('View challenge:', id)}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Empty State */}\n          {challenges.length === 0 && (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <Target className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No Challenges Yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Create your first JEE challenge to start your structured preparation journey.\n                </p>\n                <ChallengeCreationModal onCreateChallenge={handleCreateChallenge} />\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Sidebar Content */}\n        <div className=\"space-y-6\">\n          {/* Streak Counter */}\n          <StreakCounter\n            currentStreak={stats.currentStreak}\n            longestStreak={Math.max(0, ...challenges.map(c => c.progress.longestStreak))}\n            totalDays={challenges.reduce((acc, c) => acc + c.progress.completedDays, 0)}\n            studiedToday={activeChallenges.some(c => c.progress.currentStreak > 0)}\n          />\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-view-tasks\">\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                View Today's Tasks\n              </Button>\n              <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-progress\">\n                <Target className=\"h-4 w-4 mr-2\" />\n                Check Progress\n              </Button>\n              <ChallengeCreationModal onCreateChallenge={handleCreateChallenge}>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-new-challenge\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  New Challenge\n                </Button>\n              </ChallengeCreationModal>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7019},"client/src/pages/Tasks.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar, ChevronLeft, ChevronRight, CalendarDays } from \"lucide-react\";\nimport { useChallenges } from \"@/contexts/ChallengeContext\";\nimport DailyTaskList from \"@/components/DailyTaskList\";\nimport { format, addDays, subDays, startOfDay } from \"date-fns\";\n\nexport default function Tasks() {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const { getTasksForDate, updateTask } = useChallenges();\n  \n  const selectedDateString = format(selectedDate, 'yyyy-MM-dd');\n  const tasksForDate = getTasksForDate(selectedDateString);\n\n  const isToday = startOfDay(selectedDate).getTime() === startOfDay(new Date()).getTime();\n  const isPast = selectedDate < startOfDay(new Date());\n  const isFuture = selectedDate > startOfDay(new Date());\n\n  const handleTaskToggle = async (taskId: string, completed: boolean) => {\n    try {\n      await updateTask(taskId, { completed });\n    } catch (error) {\n      console.error('Failed to update task:', error);\n    }\n  };\n\n  const handleAddNote = async (taskId: string, note: string) => {\n    try {\n      await updateTask(taskId, { notes: note });\n    } catch (error) {\n      console.error('Failed to add note:', error);\n    }\n  };\n\n  const goToPreviousDay = () => {\n    setSelectedDate(prev => subDays(prev, 1));\n  };\n\n  const goToNextDay = () => {\n    setSelectedDate(prev => addDays(prev, 1));\n  };\n\n  const goToToday = () => {\n    setSelectedDate(new Date());\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"tasks-page\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Daily Tasks</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Complete your scheduled study tasks and track progress\n          </p>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={goToToday} \n          disabled={isToday}\n          data-testid=\"button-go-to-today\"\n        >\n          <CalendarDays className=\"h-4 w-4 mr-2\" />\n          Today\n        </Button>\n      </div>\n\n      {/* Date Navigation */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              onClick={goToPreviousDay}\n              data-testid=\"button-previous-day\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            \n            <div className=\"text-center\">\n              <CardTitle className=\"flex items-center gap-2 justify-center\">\n                <Calendar className=\"h-5 w-5\" />\n                {format(selectedDate, 'EEEE, MMMM dd, yyyy')}\n              </CardTitle>\n              <div className=\"flex items-center gap-2 justify-center mt-1\">\n                {isToday && (\n                  <span className=\"text-xs bg-chart-1 text-white px-2 py-1 rounded-full\">Today</span>\n                )}\n                {isPast && (\n                  <span className=\"text-xs bg-muted text-muted-foreground px-2 py-1 rounded-full\">Past</span>\n                )}\n                {isFuture && (\n                  <span className=\"text-xs bg-chart-3 text-white px-2 py-1 rounded-full\">Future</span>\n                )}\n              </div>\n            </div>\n            \n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              onClick={goToNextDay}\n              data-testid=\"button-next-day\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Task Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-chart-1\" data-testid=\"text-total-tasks\">\n                {tasksForDate.length}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Total Tasks</p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-chart-1\" data-testid=\"text-completed-tasks\">\n                {tasksForDate.filter(t => t.completed).length}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Completed</p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-chart-2\" data-testid=\"text-pending-tasks\">\n                {tasksForDate.filter(t => !t.completed).length}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Pending</p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-chart-3\" data-testid=\"text-total-time\">\n                {Math.round(tasksForDate.reduce((acc, t) => acc + t.timeAllotted, 0) / 60)}h\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Total Time</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Daily Task List */}\n      <DailyTaskList\n        tasks={tasksForDate}\n        date={selectedDateString}\n        onTaskToggle={handleTaskToggle}\n        onAddNote={handleAddNote}\n      />\n    </div>\n  );\n}","size_bytes":5788},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/ChallengeCard.tsx":{"content":"import ChallengeCard from '../ChallengeCard';\nimport { Challenge } from '@shared/schema';\n\nexport default function ChallengeCardExample() {\n  // todo: remove mock functionality\n  const mockChallenge: Challenge = {\n    id: 'challenge-1',\n    type: 'revision',\n    name: '15 Days Physics Revision Challenge',\n    duration: 15,\n    subjects: ['Physics'],\n    topics: { Physics: ['Mechanics', 'Thermodynamics', 'Electromagnetism'] },\n    startDate: '2024-01-15',\n    endDate: '2024-01-30',\n    dailyTimeHours: 4,\n    status: 'active',\n    createdAt: '2024-01-15T00:00:00Z',\n    progress: {\n      completedDays: 8,\n      totalDays: 15,\n      completedTasks: 24,\n      totalTasks: 45,\n      currentStreak: 5,\n      longestStreak: 7\n    }\n  };\n\n  return (\n    <ChallengeCard \n      challenge={mockChallenge} \n      onStart={(id) => console.log('Start challenge:', id)}\n      onPause={(id) => console.log('Pause challenge:', id)}\n      onResume={(id) => console.log('Resume challenge:', id)}\n      onView={(id) => console.log('View challenge:', id)}\n    />\n  );\n}","size_bytes":1055},"client/src/components/examples/ChallengeCreationModal.tsx":{"content":"import ChallengeCreationModal from '../ChallengeCreationModal';\nimport { InsertChallenge } from '@shared/schema';\n\nexport default function ChallengeCreationModalExample() {\n  const handleCreate = (challenge: InsertChallenge) => {\n    console.log('Challenge created:', challenge);\n  };\n\n  return (\n    <ChallengeCreationModal onCreateChallenge={handleCreate} />\n  );\n}","size_bytes":367},"client/src/components/examples/DailyTaskList.tsx":{"content":"import DailyTaskList from '../DailyTaskList';\nimport { DailyTask } from '@shared/schema';\n\nexport default function DailyTaskListExample() {\n  // todo: remove mock functionality\n  const mockTasks: DailyTask[] = [\n    {\n      id: 'task-1',\n      challengeId: 'challenge-1',\n      date: '2024-01-15',\n      subject: 'Physics',\n      topic: 'Kinematics',\n      taskType: 'theory',\n      description: 'Study motion in one dimension and related concepts',\n      timeAllotted: 90,\n      completed: true,\n      completedAt: '2024-01-15T10:30:00Z',\n      difficulty: 'medium',\n      notes: 'Completed all exercises, need to review velocity-time graphs'\n    },\n    {\n      id: 'task-2',\n      challengeId: 'challenge-1',\n      date: '2024-01-15',\n      subject: 'Chemistry',\n      topic: 'Atomic Structure',\n      taskType: 'practice',\n      description: 'Solve problems on electronic configuration',\n      timeAllotted: 60,\n      completed: false,\n      difficulty: 'hard'\n    },\n    {\n      id: 'task-3',\n      challengeId: 'challenge-1',\n      date: '2024-01-15',\n      subject: 'Mathematics',\n      topic: 'Trigonometry',\n      taskType: 'dpp',\n      description: 'Daily Practice Problems - Set 15',\n      timeAllotted: 120,\n      completed: true,\n      completedAt: '2024-01-15T15:45:00Z',\n      difficulty: 'easy',\n      notes: 'All problems solved correctly'\n    }\n  ];\n\n  const handleTaskToggle = (taskId: string, completed: boolean) => {\n    console.log(`Task ${taskId} toggled to ${completed}`);\n  };\n\n  const handleAddNote = (taskId: string, note: string) => {\n    console.log(`Note added to task ${taskId}:`, note);\n  };\n\n  return (\n    <DailyTaskList \n      tasks={mockTasks}\n      date=\"2024-01-15\"\n      onTaskToggle={handleTaskToggle}\n      onAddNote={handleAddNote}\n    />\n  );\n}","size_bytes":1786},"client/src/components/examples/DashboardStats.tsx":{"content":"import DashboardStats from '../DashboardStats';\n\nexport default function DashboardStatsExample() {\n  // todo: remove mock functionality\n  return (\n    <DashboardStats \n      totalChallenges={8}\n      activeChallenges={3}\n      completedChallenges={4}\n      currentStreak={12}\n      totalStudyHours={156}\n      tasksCompleted={89}\n    />\n  );\n}","size_bytes":343},"client/src/components/examples/StreakCounter.tsx":{"content":"import StreakCounter from '../StreakCounter';\n\nexport default function StreakCounterExample() {\n  // todo: remove mock functionality\n  return (\n    <StreakCounter \n      currentStreak={12}\n      longestStreak={15}\n      totalDays={45}\n      studiedToday={true}\n    />\n  );\n}","size_bytes":274},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"flex items-center gap-4\">\n      <span className=\"text-sm text-muted-foreground\">Toggle theme:</span>\n      <ThemeToggle />\n    </div>\n  );\n}","size_bytes":261},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Progress.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress as ProgressBar } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  TrendingUp, \n  Target, \n  Calendar, \n  Clock, \n  BookOpen, \n  BarChart3,\n  PieChart,\n  TrendingDown,\n  Award,\n  Brain,\n  Zap\n} from \"lucide-react\";\nimport { \n  ChartContainer, \n  ChartTooltip, \n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent\n} from \"@/components/ui/chart\";\nimport { \n  AreaChart, \n  Area, \n  BarChart, \n  Bar, \n  PieChart as RechartsPieChart, \n  Pie,\n  Cell, \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  ResponsiveContainer \n} from \"recharts\";\nimport { useChallenges } from \"@/contexts/ChallengeContext\";\nimport { format, subDays, startOfDay, differenceInDays } from \"date-fns\";\nimport { JEE_SUBJECTS } from \"@shared/schema\";\n\nexport default function Progress() {\n  const { state } = useChallenges();\n  const { challenges, tasks } = state;\n  const [timeRange, setTimeRange] = useState('30');\n\n  // Calculate analytics data\n  const analytics = useMemo(() => {\n    const now = new Date();\n    const daysBack = parseInt(timeRange);\n    const startDate = subDays(now, daysBack);\n\n    // Filter data based on time range\n    const filteredTasks = tasks.filter(task => \n      new Date(task.date) >= startDate\n    );\n\n    const completedTasks = filteredTasks.filter(task => task.completed);\n    \n    // Daily progress data\n    const dailyProgress = [];\n    for (let i = daysBack - 1; i >= 0; i--) {\n      const date = subDays(now, i);\n      const dayTasks = filteredTasks.filter(task => \n        startOfDay(new Date(task.date)).getTime() === startOfDay(date).getTime()\n      );\n      const dayCompleted = dayTasks.filter(task => task.completed);\n      \n      dailyProgress.push({\n        date: format(date, 'MMM dd'),\n        fullDate: format(date, 'yyyy-MM-dd'),\n        tasksCompleted: dayCompleted.length,\n        totalTasks: dayTasks.length,\n        completionRate: dayTasks.length > 0 ? (dayCompleted.length / dayTasks.length) * 100 : 0,\n        studyTime: dayCompleted.reduce((acc, task) => acc + (task.timeAllotted || 0), 0) / 60 // Convert to hours\n      });\n    }\n\n    // Subject-wise performance\n    const subjectPerformance = JEE_SUBJECTS.map(subject => {\n      const subjectTasks = filteredTasks.filter(task => task.subject === subject);\n      const subjectCompleted = subjectTasks.filter(task => task.completed);\n      \n      return {\n        subject,\n        totalTasks: subjectTasks.length,\n        completedTasks: subjectCompleted.length,\n        completionRate: subjectTasks.length > 0 ? (subjectCompleted.length / subjectTasks.length) * 100 : 0,\n        timeSpent: subjectCompleted.reduce((acc, task) => acc + (task.timeAllotted || 0), 0) / 60\n      };\n    });\n\n    // Task type distribution\n    const taskTypes = ['theory', 'practice', 'revision', 'mock-test', 'dpp'];\n    const taskTypeData = taskTypes.map(type => {\n      const typeTasks = completedTasks.filter(task => task.taskType === type);\n      return {\n        type: type.charAt(0).toUpperCase() + type.slice(1).replace('-', ' '),\n        count: typeTasks.length,\n        timeSpent: typeTasks.reduce((acc, task) => acc + (task.timeAllotted || 0), 0) / 60,\n        fill: `hsl(var(--chart-${taskTypes.indexOf(type) + 1}))`\n      };\n    }).filter(item => item.count > 0);\n\n    // Challenge performance\n    const challengeStats = challenges.map(challenge => ({\n      name: challenge.name,\n      progress: (challenge.progress.completedDays / challenge.progress.totalDays) * 100,\n      status: challenge.status,\n      currentStreak: challenge.progress.currentStreak,\n      longestStreak: challenge.progress.longestStreak,\n      tasksCompleted: challenge.progress.completedTasks,\n      totalTasks: challenge.progress.totalTasks\n    }));\n\n    return {\n      dailyProgress,\n      subjectPerformance,\n      taskTypeData,\n      challengeStats,\n      overview: {\n        totalTasks: filteredTasks.length,\n        completedTasks: completedTasks.length,\n        completionRate: filteredTasks.length > 0 ? (completedTasks.length / filteredTasks.length) * 100 : 0,\n        totalStudyTime: completedTasks.reduce((acc, task) => acc + (task.timeAllotted || 0), 0) / 60,\n        averageDaily: dailyProgress.length > 0 ? \n          dailyProgress.reduce((acc, day) => acc + day.studyTime, 0) / dailyProgress.length : 0,\n        bestStreak: Math.max(...challenges.map(c => c.progress.longestStreak), 0),\n        activeChallenges: challenges.filter(c => c.status === 'active').length\n      }\n    };\n  }, [challenges, tasks, timeRange]);\n\n  const subjectColors = {\n    Physics: '#8b5cf6',\n    Chemistry: '#06b6d4', \n    Mathematics: '#f59e0b'\n  };\n\n  const chartConfig = {\n    tasksCompleted: {\n      label: \"Tasks Completed\",\n      color: \"hsl(var(--chart-1))\",\n    },\n    completionRate: {\n      label: \"Completion Rate %\",\n      color: \"hsl(var(--chart-2))\",\n    },\n    studyTime: {\n      label: \"Study Time (hrs)\",\n      color: \"hsl(var(--chart-3))\",\n    },\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"progress-page\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Progress Tracker</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Detailed analytics and insights into your JEE preparation journey\n          </p>\n        </div>\n        <Select value={timeRange} onValueChange={setTimeRange}>\n          <SelectTrigger className=\"w-32\" data-testid=\"select-time-range\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"7\">Last 7 days</SelectItem>\n            <SelectItem value=\"30\">Last 30 days</SelectItem>\n            <SelectItem value=\"90\">Last 90 days</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"hover-elevate\" data-testid=\"stat-total-tasks\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Tasks</CardTitle>\n            <Target className=\"h-4 w-4 text-chart-1\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.overview.totalTasks}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.overview.completedTasks} completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"stat-completion-rate\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Completion Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-chart-2\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.overview.completionRate.toFixed(1)}%</div>\n            <ProgressBar value={analytics.overview.completionRate} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"stat-study-time\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Study Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-chart-3\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.overview.totalStudyTime.toFixed(1)}h</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.overview.averageDaily.toFixed(1)}h avg/day\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"stat-best-streak\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Best Streak</CardTitle>\n            <Zap className=\"h-4 w-4 text-chart-2\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.overview.bestStreak}</div>\n            <p className=\"text-xs text-muted-foreground\">days consecutive</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Analytics */}\n      <Tabs defaultValue=\"daily\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"daily\" data-testid=\"tab-daily\">Daily Progress</TabsTrigger>\n          <TabsTrigger value=\"subjects\" data-testid=\"tab-subjects\">Subject Analysis</TabsTrigger>\n          <TabsTrigger value=\"challenges\" data-testid=\"tab-challenges\">Challenge Stats</TabsTrigger>\n          <TabsTrigger value=\"insights\" data-testid=\"tab-insights\">Insights</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"daily\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Daily Task Completion */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-5 w-5\" />\n                  Daily Task Completion\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ChartContainer config={chartConfig}>\n                  <AreaChart data={analytics.dailyProgress}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <ChartTooltip content={<ChartTooltipContent />} />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"tasksCompleted\"\n                      stroke=\"var(--color-tasksCompleted)\"\n                      fill=\"var(--color-tasksCompleted)\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ChartContainer>\n              </CardContent>\n            </Card>\n\n            {/* Study Time Trend */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  Study Time Trend\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ChartContainer config={chartConfig}>\n                  <LineChart data={analytics.dailyProgress}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <ChartTooltip content={<ChartTooltipContent />} />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"studyTime\"\n                      stroke=\"var(--color-studyTime)\"\n                      strokeWidth={2}\n                    />\n                  </LineChart>\n                </ChartContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Completion Rate Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Completion Rate Over Time\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ChartContainer config={chartConfig}>\n                <AreaChart data={analytics.dailyProgress} height={300}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis domain={[0, 100]} />\n                  <ChartTooltip content={<ChartTooltipContent />} />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"completionRate\"\n                    stroke=\"var(--color-completionRate)\"\n                    fill=\"var(--color-completionRate)\"\n                    fillOpacity={0.3}\n                  />\n                </AreaChart>\n              </ChartContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"subjects\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Subject Performance Bars */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  Subject Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {analytics.subjectPerformance.map((subject) => (\n                    <div key={subject.subject} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{subject.subject}</span>\n                        <Badge variant=\"outline\">\n                          {subject.completionRate.toFixed(1)}%\n                        </Badge>\n                      </div>\n                      <ProgressBar value={subject.completionRate} />\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>{subject.completedTasks}/{subject.totalTasks} tasks</span>\n                        <span>{subject.timeSpent.toFixed(1)}h studied</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Task Type Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <PieChart className=\"h-5 w-5\" />\n                  Task Type Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ChartContainer config={chartConfig}>\n                  <RechartsPieChart>\n                    <ChartTooltip content={<ChartTooltipContent />} />\n                    <Pie \n                      data={analytics.taskTypeData} \n                      dataKey=\"count\" \n                      nameKey=\"type\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                    >\n                      {analytics.taskTypeData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                    <ChartLegend content={<ChartLegendContent />} />\n                  </RechartsPieChart>\n                </ChartContainer>\n                <div className=\"mt-4 space-y-2\">\n                  {analytics.taskTypeData.map((item, index) => (\n                    <div key={item.type} className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-3 h-3 rounded-full\" \n                          style={{ backgroundColor: `hsl(var(--chart-${index + 1}))` }}\n                        />\n                        <span>{item.type}</span>\n                      </div>\n                      <span className=\"font-medium\">{item.count} tasks</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"challenges\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {analytics.challengeStats.map((challenge, index) => (\n              <Card key={challenge.name} className=\"hover-elevate\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"truncate\">{challenge.name}</span>\n                    <Badge \n                      variant={challenge.status === 'active' ? 'default' : 'secondary'}\n                      data-testid={`badge-challenge-status-${index}`}\n                    >\n                      {challenge.status}\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Progress</span>\n                      <span>{challenge.progress.toFixed(1)}%</span>\n                    </div>\n                    <ProgressBar value={challenge.progress} />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"space-y-1\">\n                      <div className=\"text-muted-foreground\">Current Streak</div>\n                      <div className=\"font-semibold\">{challenge.currentStreak} days</div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"text-muted-foreground\">Best Streak</div>\n                      <div className=\"font-semibold\">{challenge.longestStreak} days</div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"text-muted-foreground\">Tasks Done</div>\n                      <div className=\"font-semibold\">{challenge.tasksCompleted}/{challenge.totalTasks}</div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"text-muted-foreground\">Efficiency</div>\n                      <div className=\"font-semibold\">\n                        {challenge.totalTasks > 0 ? \n                          ((challenge.tasksCompleted / challenge.totalTasks) * 100).toFixed(0) : 0}%\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Performance Insights */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"h-5 w-5\" />\n                  Performance Insights\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {analytics.overview.completionRate >= 80 && (\n                  <div className=\"p-3 bg-chart-1/10 rounded-md border border-chart-1/20\">\n                    <div className=\"flex items-center gap-2 text-chart-1 font-medium\">\n                      <Award className=\"h-4 w-4\" />\n                      Excellent Performance!\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      You're maintaining an {analytics.overview.completionRate.toFixed(0)}% completion rate. Keep up the great work!\n                    </p>\n                  </div>\n                )}\n                \n                {analytics.overview.averageDaily < 2 && (\n                  <div className=\"p-3 bg-chart-2/10 rounded-md border border-chart-2/20\">\n                    <div className=\"flex items-center gap-2 text-chart-2 font-medium\">\n                      <TrendingUp className=\"h-4 w-4\" />\n                      Boost Your Study Time\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Consider increasing daily study time. Aim for at least 3-4 hours per day.\n                    </p>\n                  </div>\n                )}\n\n                {analytics.subjectPerformance.some(s => s.completionRate < 50) && (\n                  <div className=\"p-3 bg-chart-3/10 rounded-md border border-chart-3/20\">\n                    <div className=\"flex items-center gap-2 text-chart-3 font-medium\">\n                      <Target className=\"h-4 w-4\" />\n                      Focus on Weak Areas\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Some subjects need attention. Consider creating focused challenges for improvement.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Study Recommendations */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5\" />\n                  Recommendations\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Best Performing Subject</h4>\n                  {analytics.subjectPerformance.length > 0 && (\n                    <div className=\"flex items-center justify-between p-2 bg-muted rounded-md\">\n                      <span>{analytics.subjectPerformance.reduce((best, current) => \n                        current.completionRate > best.completionRate ? current : best\n                      ).subject}</span>\n                      <Badge variant=\"outline\">\n                        {analytics.subjectPerformance.reduce((best, current) => \n                          current.completionRate > best.completionRate ? current : best\n                        ).completionRate.toFixed(1)}%\n                      </Badge>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Areas for Improvement</h4>\n                  {analytics.subjectPerformance\n                    .filter(s => s.completionRate < 70)\n                    .slice(0, 2)\n                    .map(subject => (\n                      <div key={subject.subject} className=\"flex items-center justify-between p-2 bg-muted rounded-md\">\n                        <span>{subject.subject}</span>\n                        <Badge variant=\"outline\">\n                          {subject.completionRate.toFixed(1)}%\n                        </Badge>\n                      </div>\n                    ))}\n                </div>\n\n                <div className=\"pt-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-create-focused-challenge\">\n                    Create Focused Challenge\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":23117},"client/src/pages/StreakPage.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Zap, \n  TrendingUp, \n  Calendar, \n  Target, \n  Trophy,\n  Flame,\n  Award,\n  Star,\n  CheckCircle,\n  Circle,\n  ArrowUp,\n  ArrowDown,\n  RotateCcw,\n  Sprout,\n  Gem,\n  Crown\n} from \"lucide-react\";\nimport { \n  ChartContainer, \n  ChartTooltip, \n  ChartTooltipContent\n} from \"@/components/ui/chart\";\nimport { \n  AreaChart, \n  Area, \n  BarChart, \n  Bar, \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid \n} from \"recharts\";\nimport { useChallenges } from \"@/contexts/ChallengeContext\";\nimport { format, subDays, startOfDay, isToday, isYesterday } from \"date-fns\";\nimport { motion } from \"framer-motion\";\n\nexport default function StreakPage() {\n  const { state } = useChallenges();\n  const { challenges, tasks } = state;\n  const [selectedRange, setSelectedRange] = useState('30');\n\n  // Calculate streak analytics\n  const streakAnalytics = useMemo(() => {\n    const now = new Date();\n    const daysBack = parseInt(selectedRange);\n    \n    // Get all completed tasks\n    const completedTasks = tasks.filter(task => task.completed);\n    \n    // Calculate daily completion status for the range\n    const dailyStatus = [];\n    for (let i = daysBack - 1; i >= 0; i--) {\n      const date = subDays(now, i);\n      const dayTasks = tasks.filter(task => \n        startOfDay(new Date(task.date)).getTime() === startOfDay(date).getTime()\n      );\n      const dayCompleted = dayTasks.filter(task => task.completed);\n      \n      dailyStatus.push({\n        date: format(date, 'MMM dd'),\n        fullDate: format(date, 'yyyy-MM-dd'),\n        hasTask: dayTasks.length > 0,\n        completed: dayCompleted.length > 0,\n        completionRate: dayTasks.length > 0 ? (dayCompleted.length / dayTasks.length) * 100 : 0,\n        tasksCompleted: dayCompleted.length,\n        totalTasks: dayTasks.length,\n        studyTime: dayCompleted.reduce((acc, task) => acc + (task.timeAllotted || 0), 0) / 60\n      });\n    }\n\n    // Calculate current streak\n    let currentStreak = 0;\n    let longestStreak = 0;\n    let tempStreak = 0;\n    let streakEndDate: Date | null = null;\n    \n    // Calculate streaks from most recent backwards\n    for (let i = dailyStatus.length - 1; i >= 0; i--) {\n      const day = dailyStatus[i];\n      if (day.completed && day.hasTask) {\n        tempStreak++;\n        if (i === dailyStatus.length - 1) { // Today or most recent day\n          currentStreak = tempStreak;\n        }\n      } else if (day.hasTask) {\n        // If we haven't set currentStreak yet and we have a temp streak, set it\n        if (i === dailyStatus.length - 1 && tempStreak > 0) {\n          currentStreak = tempStreak;\n        }\n        if (streakEndDate === null && tempStreak > 0) {\n          streakEndDate = new Date(day.fullDate);\n        }\n        longestStreak = Math.max(longestStreak, tempStreak);\n        tempStreak = 0;\n      } else {\n        // No task day - continue streak if we're building one\n        if (i === dailyStatus.length - 1 && tempStreak > 0) {\n          currentStreak = tempStreak;\n        }\n      }\n    }\n    longestStreak = Math.max(longestStreak, tempStreak);\n\n    // Calculate challenge streaks\n    const challengeStreaks = challenges.map(challenge => ({\n      name: challenge.name,\n      currentStreak: challenge.progress.currentStreak,\n      longestStreak: challenge.progress.longestStreak,\n      status: challenge.status\n    }));\n\n    // Today's status\n    const today = dailyStatus[dailyStatus.length - 1] || { completed: false, hasTask: false };\n    const yesterday = dailyStatus[dailyStatus.length - 2] || { completed: false, hasTask: false };\n\n    // Streak milestones\n    const milestones = [\n      { days: 3, title: \"Getting Started\", icon: \"Sprout\", achieved: longestStreak >= 3 },\n      { days: 7, title: \"Week Warrior\", icon: \"Star\", achieved: longestStreak >= 7 },\n      { days: 14, title: \"Fortnight Fighter\", icon: \"Flame\", achieved: longestStreak >= 14 },\n      { days: 30, title: \"Monthly Master\", icon: \"Trophy\", achieved: longestStreak >= 30 },\n      { days: 50, title: \"Persistence Pro\", icon: \"Gem\", achieved: longestStreak >= 50 },\n      { days: 100, title: \"Century Champion\", icon: \"Crown\", achieved: longestStreak >= 100 }\n    ];\n\n    // Next milestone\n    const nextMilestone = milestones.find(m => !m.achieved);\n    const progressToNext = nextMilestone ? (currentStreak / nextMilestone.days) * 100 : 100;\n\n    return {\n      currentStreak,\n      longestStreak,\n      dailyStatus,\n      challengeStreaks,\n      todayCompleted: today.completed,\n      todayHasTask: today.hasTask,\n      yesterdayCompleted: yesterday.completed,\n      streakEndDate,\n      milestones,\n      nextMilestone,\n      progressToNext,\n      totalStudyDays: dailyStatus.filter(d => d.completed).length,\n      averageDaily: dailyStatus.length > 0 ? \n        dailyStatus.reduce((acc, day) => acc + day.studyTime, 0) / dailyStatus.length : 0\n    };\n  }, [challenges, tasks, selectedRange]);\n\n  const chartConfig = {\n    completed: {\n      label: \"Study Days\",\n      color: \"hsl(var(--chart-2))\",\n    },\n    completionRate: {\n      label: \"Completion Rate %\",\n      color: \"hsl(var(--chart-2))\",\n    },\n    studyTime: {\n      label: \"Study Time (hrs)\",\n      color: \"hsl(var(--chart-1))\",\n    },\n  };\n\n  const getStreakMessage = () => {\n    if (streakAnalytics.todayCompleted) {\n      return {\n        type: \"success\",\n        message: \"Great job! You've studied today and maintained your streak!\",\n        icon: <CheckCircle className=\"h-4 w-4\" />\n      };\n    } else if (streakAnalytics.todayHasTask && !streakAnalytics.todayCompleted) {\n      if (streakAnalytics.currentStreak > 0) {\n        return {\n          type: \"warning\",\n          message: `Don't break your ${streakAnalytics.currentStreak}-day streak! Complete today's tasks.`,\n          icon: <Circle className=\"h-4 w-4\" />\n        };\n      } else {\n        return {\n          type: \"info\",\n          message: \"Start a new streak by completing today's tasks!\",\n          icon: <Circle className=\"h-4 w-4\" />\n        };\n      }\n    } else {\n      return {\n        type: \"neutral\",\n        message: \"No tasks scheduled for today. Create a challenge to get started!\",\n        icon: <Target className=\"h-4 w-4\" />\n      };\n    }\n  };\n\n  const streakMessage = getStreakMessage();\n\n  // Helper function to render milestone icons\n  const renderMilestoneIcon = (iconName: string, className: string = \"h-5 w-5\") => {\n    const iconMap = {\n      Sprout: <Sprout className={className} />,\n      Star: <Star className={className} />,\n      Flame: <Flame className={className} />,\n      Trophy: <Trophy className={className} />,\n      Gem: <Gem className={className} />,\n      Crown: <Crown className={className} />\n    };\n    return iconMap[iconName as keyof typeof iconMap] || <Star className={className} />;\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"streak-page\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Streak Counter</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track your study consistency and build lasting habits\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setSelectedRange('7')}\n            className={selectedRange === '7' ? 'bg-primary text-primary-foreground' : ''}\n            data-testid=\"button-range-7\"\n          >\n            7D\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setSelectedRange('30')}\n            className={selectedRange === '30' ? 'bg-primary text-primary-foreground' : ''}\n            data-testid=\"button-range-30\"\n          >\n            30D\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setSelectedRange('90')}\n            className={selectedRange === '90' ? 'bg-primary text-primary-foreground' : ''}\n            data-testid=\"button-range-90\"\n          >\n            90D\n          </Button>\n        </div>\n      </div>\n\n      {/* Current Status */}\n      <div className={`p-4 rounded-lg border ${\n        streakMessage.type === 'success' ? 'bg-chart-1/10 border-chart-1/20' :\n        streakMessage.type === 'warning' ? 'bg-chart-2/10 border-chart-2/20' :\n        streakMessage.type === 'info' ? 'bg-chart-3/10 border-chart-3/20' :\n        'bg-muted border-border'\n      }`} data-testid=\"streak-message\">\n        <div className=\"flex items-center gap-3\">\n          <div className={`p-2 rounded-md ${\n            streakMessage.type === 'success' ? 'bg-chart-1/20' :\n            streakMessage.type === 'warning' ? 'bg-chart-2/20' :\n            streakMessage.type === 'info' ? 'bg-chart-3/20' :\n            'bg-muted'\n          }`}>\n            {streakMessage.icon}\n          </div>\n          <div>\n            <p className=\"font-medium\">{streakMessage.message}</p>\n            {streakMessage.type === 'warning' && (\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Complete your tasks before midnight to keep the streak alive!\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Stats */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"hover-elevate\" data-testid=\"stat-current-streak\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Current Streak</CardTitle>\n            <Flame className=\"h-4 w-4 text-chart-2\" />\n          </CardHeader>\n          <CardContent>\n            <motion.div \n              className=\"text-3xl font-bold text-chart-2\"\n              animate={{ scale: streakAnalytics.todayCompleted ? [1, 1.1, 1] : 1 }}\n              transition={{ duration: 0.5 }}\n            >\n              {streakAnalytics.currentStreak}\n            </motion.div>\n            <p className=\"text-xs text-muted-foreground\">\n              {streakAnalytics.currentStreak === 1 ? 'day' : 'days'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"stat-longest-streak\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Longest Streak</CardTitle>\n            <Trophy className=\"h-4 w-4 text-chart-1\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">{streakAnalytics.longestStreak}</div>\n            <p className=\"text-xs text-muted-foreground\">personal best</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"stat-study-days\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Study Days</CardTitle>\n            <Calendar className=\"h-4 w-4 text-chart-3\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">{streakAnalytics.totalStudyDays}</div>\n            <p className=\"text-xs text-muted-foreground\">in {selectedRange} days</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"stat-consistency\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Consistency</CardTitle>\n            <Target className=\"h-4 w-4 text-chart-1\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">\n              {((streakAnalytics.totalStudyDays / parseInt(selectedRange)) * 100).toFixed(0)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">of days studied</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"milestones\" data-testid=\"tab-milestones\">Milestones</TabsTrigger>\n          <TabsTrigger value=\"calendar\" data-testid=\"tab-calendar\">Calendar</TabsTrigger>\n          <TabsTrigger value=\"challenges\" data-testid=\"tab-challenges\">Challenges</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Streak Trend */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Study Consistency\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ChartContainer config={chartConfig}>\n                  <AreaChart data={streakAnalytics.dailyStatus}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <ChartTooltip content={<ChartTooltipContent />} />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"completionRate\"\n                      stroke=\"var(--color-completionRate)\"\n                      fill=\"var(--color-completionRate)\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ChartContainer>\n              </CardContent>\n            </Card>\n\n            {/* Next Milestone Progress */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Star className=\"h-5 w-5\" />\n                  Next Milestone\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {streakAnalytics.nextMilestone ? (\n                  <>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-2 rounded-md bg-primary/10\">\n                          {renderMilestoneIcon(streakAnalytics.nextMilestone.icon, \"h-6 w-6 text-primary\")}\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold\">{streakAnalytics.nextMilestone.title}</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {streakAnalytics.nextMilestone.days} days\n                          </p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\">\n                        {Math.round(streakAnalytics.progressToNext)}%\n                      </Badge>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>{streakAnalytics.currentStreak} days</span>\n                        <span>{streakAnalytics.nextMilestone.days} days</span>\n                      </div>\n                      <Progress value={streakAnalytics.progressToNext} />\n                      <p className=\"text-xs text-center text-muted-foreground\">\n                        {streakAnalytics.nextMilestone.days - streakAnalytics.currentStreak} more days to go!\n                      </p>\n                    </div>\n                  </>\n                ) : (\n                  <div className=\"text-center space-y-2\">\n                    <div className=\"p-3 rounded-lg bg-primary/10\">\n                      <Crown className=\"h-8 w-8 text-primary mx-auto\" />\n                    </div>\n                    <h3 className=\"font-semibold\">Streak Master!</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      You've achieved all available milestones. Keep going!\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recovery Tips */}\n          {streakAnalytics.currentStreak === 0 && streakAnalytics.longestStreak > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <RotateCcw className=\"h-5 w-5\" />\n                  Streak Recovery Tips\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"p-3 bg-muted rounded-md\">\n                    <h4 className=\"font-medium mb-2\">Start Small</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Begin with just 15-30 minutes of study to rebuild the habit.\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-muted rounded-md\">\n                    <h4 className=\"font-medium mb-2\">Set Reminders</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Use phone alarms or study apps to remind you to study daily.\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-muted rounded-md\">\n                    <h4 className=\"font-medium mb-2\">Choose Easy Topics</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Start with revision or topics you enjoy to build momentum.\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-muted rounded-md\">\n                    <h4 className=\"font-medium mb-2\">Track Progress</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Check this page daily to visualize your growing streak.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"milestones\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {streakAnalytics.milestones.map((milestone, index) => (\n              <Card \n                key={milestone.days} \n                className={`hover-elevate ${milestone.achieved ? 'bg-chart-1/5 border-chart-1/20' : ''}`}\n                data-testid={`milestone-${milestone.days}`}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"text-2xl\">{milestone.icon}</div>\n                      <div>\n                        <CardTitle className=\"text-lg\">{milestone.title}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">{milestone.days} days</p>\n                      </div>\n                    </div>\n                    {milestone.achieved && (\n                      <CheckCircle className=\"h-5 w-5 text-chart-1\" />\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {milestone.achieved ? (\n                    <Badge className=\"bg-chart-1 text-white\">Achieved!</Badge>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Progress</span>\n                        <span>{Math.min(streakAnalytics.longestStreak, milestone.days)}/{milestone.days}</span>\n                      </div>\n                      <Progress \n                        value={(Math.min(streakAnalytics.longestStreak, milestone.days) / milestone.days) * 100} \n                      />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"calendar\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Study Calendar\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-7 gap-2 text-center\">\n                {streakAnalytics.dailyStatus.slice(-28).map((day, index) => (\n                  <div\n                    key={day.fullDate}\n                    className={`p-2 rounded-md text-xs ${\n                      day.completed \n                        ? 'bg-chart-1 text-white' \n                        : day.hasTask \n                          ? 'bg-muted text-muted-foreground' \n                          : 'bg-background'\n                    }`}\n                    title={`${day.fullDate}: ${day.completed ? 'Studied' : day.hasTask ? 'Missed' : 'No tasks'}`}\n                    data-testid={`calendar-day-${index}`}\n                  >\n                    {format(new Date(day.fullDate), 'd')}\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex items-center justify-center gap-4 mt-4 text-xs\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-chart-1 rounded\"></div>\n                  <span>Studied</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-muted rounded\"></div>\n                  <span>Missed</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-background border rounded\"></div>\n                  <span>No tasks</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"challenges\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {streakAnalytics.challengeStreaks.map((challenge, index) => (\n              <Card key={challenge.name} className=\"hover-elevate\" data-testid={`challenge-streak-${index}`}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"truncate\">{challenge.name}</span>\n                    <Badge variant={challenge.status === 'active' ? 'default' : 'secondary'}>\n                      {challenge.status}\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-center\">\n                    <div className=\"space-y-1\">\n                      <div className=\"text-2xl font-bold text-chart-2\">{challenge.currentStreak}</div>\n                      <p className=\"text-xs text-muted-foreground\">Current</p>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"text-2xl font-bold\">{challenge.longestStreak}</div>\n                      <p className=\"text-xs text-muted-foreground\">Best</p>\n                    </div>\n                  </div>\n                  \n                  {challenge.currentStreak === challenge.longestStreak && challenge.currentStreak > 0 && (\n                    <div className=\"text-center p-2 bg-chart-1/10 rounded-md\">\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <Trophy className=\"h-4 w-4 text-chart-1\" />\n                        <p className=\"text-sm font-medium text-chart-1\">Personal Best!</p>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":24462},"client/src/components/ChallengeTaskManager.tsx":{"content":"import { useState } from 'react';\nimport { Challenge, DailyTask } from '@shared/schema';\nimport { useChallenges } from '@/contexts/ChallengeContext';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Trash2, Plus, Edit, Save, X } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface ChallengeTaskManagerProps {\n  challenge: Challenge;\n}\n\ninterface EditingTask {\n  id?: string;\n  date: string;\n  subject: 'Physics' | 'Chemistry' | 'Mathematics';\n  topic: string;\n  taskType: 'theory' | 'practice' | 'revision' | 'mock-test' | 'dpp' | 'concept-mastery' | 'intensive-practice' | 'exam-simulation' | 'formula-practice' | 'previous-year' | 'speed-drill' | 'video-lecture' | 'concept-mapping';\n  description: string;\n  timeAllotted: number;\n  difficulty: 'easy' | 'medium' | 'hard';\n  notes: string;\n}\n\nexport default function ChallengeTaskManager({ challenge }: ChallengeTaskManagerProps) {\n  const { getTasksForChallenge, addTask, updateTask, deleteTask } = useChallenges();\n  const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\n  const [isAddingTask, setIsAddingTask] = useState(false);\n  const [editingData, setEditingData] = useState<EditingTask>({\n    date: format(new Date(), 'yyyy-MM-dd'),\n    subject: 'Mathematics',\n    topic: '',\n    taskType: 'theory',\n    description: '',\n    timeAllotted: 60,\n    difficulty: 'medium',\n    notes: ''\n  });\n\n  // Get all tasks for this challenge (including paused)\n  const allChallengeTasks = getTasksForChallenge(challenge.id).sort((a, b) => \n    new Date(a.date).getTime() - new Date(b.date).getTime()\n  );\n\n  const getSubjectColor = (subject: string) => {\n    switch (subject) {\n      case 'Physics': return 'bg-chart-3 text-white';\n      case 'Chemistry': return 'bg-chart-1 text-white';\n      case 'Mathematics': return 'bg-chart-2 text-white';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'bg-chart-1 text-white';\n      case 'medium': return 'bg-chart-2 text-white';\n      case 'hard': return 'bg-destructive text-destructive-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const handleStartEdit = (task: DailyTask) => {\n    setEditingTaskId(task.id);\n    setEditingData({\n      date: task.date,\n      subject: task.subject,\n      topic: task.topic,\n      taskType: task.taskType,\n      description: task.description,\n      timeAllotted: task.timeAllotted,\n      difficulty: task.difficulty,\n      notes: task.notes || ''\n    });\n  };\n\n  const handleSaveEdit = async () => {\n    if (!editingTaskId) return;\n    \n    try {\n      await updateTask(editingTaskId, {\n        date: editingData.date,\n        subject: editingData.subject,\n        topic: editingData.topic,\n        taskType: editingData.taskType,\n        description: editingData.description,\n        timeAllotted: editingData.timeAllotted,\n        difficulty: editingData.difficulty,\n        notes: editingData.notes\n      });\n      setEditingTaskId(null);\n    } catch (error) {\n      console.error('Failed to update task:', error);\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingTaskId(null);\n    setEditingData({\n      date: format(new Date(), 'yyyy-MM-dd'),\n      subject: 'Mathematics',\n      topic: '',\n      taskType: 'theory',\n      description: '',\n      timeAllotted: 60,\n      difficulty: 'medium',\n      notes: ''\n    });\n  };\n\n  const handleAddTask = async () => {\n    try {\n      await addTask({\n        challengeId: challenge.id,\n        date: editingData.date,\n        subject: editingData.subject,\n        topic: editingData.topic,\n        taskType: editingData.taskType,\n        description: editingData.description,\n        timeAllotted: editingData.timeAllotted,\n        difficulty: editingData.difficulty,\n        notes: editingData.notes,\n        completed: false\n      });\n      setIsAddingTask(false);\n      setEditingData({\n        date: format(new Date(), 'yyyy-MM-dd'),\n        subject: 'Mathematics',\n        topic: '',\n        taskType: 'theory',\n        description: '',\n        timeAllotted: 60,\n        difficulty: 'medium',\n        notes: ''\n      });\n    } catch (error) {\n      console.error('Failed to add task:', error);\n    }\n  };\n\n  const handleDeleteTask = async (taskId: string) => {\n    if (confirm('Are you sure you want to delete this task?')) {\n      try {\n        await deleteTask(taskId);\n      } catch (error) {\n        console.error('Failed to delete task:', error);\n      }\n    }\n  };\n\n  const TaskRow = ({ task, isEditing }: { task: DailyTask; isEditing: boolean }) => {\n    if (isEditing) {\n      return (\n        <tr className=\"border-b\">\n          <td className=\"p-2\">\n            <Input\n              type=\"date\"\n              value={editingData.date}\n              onChange={(e) => setEditingData({...editingData, date: e.target.value})}\n              data-testid={`input-edit-date-${task.id}`}\n            />\n          </td>\n          <td className=\"p-2\">\n            <Select value={editingData.subject} onValueChange={(value: any) => setEditingData({...editingData, subject: value})}>\n              <SelectTrigger data-testid={`select-edit-subject-${task.id}`}>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Physics\">Physics</SelectItem>\n                <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n                <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n              </SelectContent>\n            </Select>\n          </td>\n          <td className=\"p-2\">\n            <Input\n              value={editingData.topic}\n              onChange={(e) => setEditingData({...editingData, topic: e.target.value})}\n              placeholder=\"Topic\"\n              data-testid={`input-edit-topic-${task.id}`}\n            />\n          </td>\n          <td className=\"p-2\">\n            <Select value={editingData.taskType} onValueChange={(value: any) => setEditingData({...editingData, taskType: value})}>\n              <SelectTrigger data-testid={`select-edit-tasktype-${task.id}`}>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"theory\">Theory</SelectItem>\n                <SelectItem value=\"practice\">Practice</SelectItem>\n                <SelectItem value=\"revision\">Revision</SelectItem>\n                <SelectItem value=\"mock-test\">Mock Test</SelectItem>\n                <SelectItem value=\"dpp\">DPP</SelectItem>\n                <SelectItem value=\"concept-mastery\">Concept Mastery</SelectItem>\n                <SelectItem value=\"intensive-practice\">Intensive Practice</SelectItem>\n                <SelectItem value=\"exam-simulation\">Exam Simulation</SelectItem>\n                <SelectItem value=\"formula-practice\">Formula Practice</SelectItem>\n                <SelectItem value=\"previous-year\">Previous Year</SelectItem>\n                <SelectItem value=\"speed-drill\">Speed Drill</SelectItem>\n                <SelectItem value=\"video-lecture\">Video Lecture</SelectItem>\n                <SelectItem value=\"concept-mapping\">Concept Mapping</SelectItem>\n              </SelectContent>\n            </Select>\n          </td>\n          <td className=\"p-2\">\n            <Textarea\n              value={editingData.description}\n              onChange={(e) => setEditingData({...editingData, description: e.target.value})}\n              placeholder=\"Description\"\n              className=\"min-h-12\"\n              data-testid={`textarea-edit-description-${task.id}`}\n            />\n          </td>\n          <td className=\"p-2\">\n            <Input\n              type=\"number\"\n              value={editingData.timeAllotted}\n              onChange={(e) => setEditingData({...editingData, timeAllotted: parseInt(e.target.value) || 0})}\n              min=\"1\"\n              data-testid={`input-edit-time-${task.id}`}\n            />\n          </td>\n          <td className=\"p-2\">\n            <Select value={editingData.difficulty} onValueChange={(value: any) => setEditingData({...editingData, difficulty: value})}>\n              <SelectTrigger data-testid={`select-edit-difficulty-${task.id}`}>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"easy\">Easy</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"hard\">Hard</SelectItem>\n              </SelectContent>\n            </Select>\n          </td>\n          <td className=\"p-2\">\n            <Textarea\n              value={editingData.notes}\n              onChange={(e) => setEditingData({...editingData, notes: e.target.value})}\n              placeholder=\"Notes\"\n              className=\"min-h-12\"\n              data-testid={`textarea-edit-notes-${task.id}`}\n            />\n          </td>\n          <td className=\"p-2\">\n            <div className=\"flex gap-2\">\n              <Button \n                size=\"sm\" \n                onClick={handleSaveEdit}\n                data-testid={`button-save-edit-${task.id}`}\n              >\n                <Save className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                onClick={handleCancelEdit}\n                data-testid={`button-cancel-edit-${task.id}`}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </td>\n        </tr>\n      );\n    }\n\n    return (\n      <tr className=\"border-b hover-elevate\">\n        <td className=\"p-2\" data-testid={`text-task-date-${task.id}`}>\n          {format(new Date(task.date), 'MMM dd, yyyy')}\n        </td>\n        <td className=\"p-2\">\n          <Badge className={getSubjectColor(task.subject)} data-testid={`badge-task-subject-${task.id}`}>\n            {task.subject}\n          </Badge>\n        </td>\n        <td className=\"p-2\" data-testid={`text-task-topic-${task.id}`}>{task.topic}</td>\n        <td className=\"p-2\" data-testid={`text-task-type-${task.id}`}>{task.taskType}</td>\n        <td className=\"p-2 max-w-xs truncate\" data-testid={`text-task-description-${task.id}`}>{task.description}</td>\n        <td className=\"p-2\" data-testid={`text-task-time-${task.id}`}>{task.timeAllotted}min</td>\n        <td className=\"p-2\">\n          <Badge className={getDifficultyColor(task.difficulty)} data-testid={`badge-task-difficulty-${task.id}`}>\n            {task.difficulty}\n          </Badge>\n        </td>\n        <td className=\"p-2 max-w-xs truncate\" data-testid={`text-task-notes-${task.id}`}>{task.notes || '-'}</td>\n        <td className=\"p-2\">\n          <div className=\"flex gap-2\">\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => handleStartEdit(task)}\n              data-testid={`button-edit-task-${task.id}`}\n            >\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"destructive\" \n              onClick={() => handleDeleteTask(task.id)}\n              data-testid={`button-delete-task-${task.id}`}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  const AddTaskRow = () => {\n    if (!isAddingTask) return null;\n\n    return (\n      <tr className=\"border-b bg-muted/20\">\n        <td className=\"p-2\">\n          <Input\n            type=\"date\"\n            value={editingData.date}\n            onChange={(e) => setEditingData({...editingData, date: e.target.value})}\n            data-testid=\"input-add-date\"\n          />\n        </td>\n        <td className=\"p-2\">\n          <Select value={editingData.subject} onValueChange={(value: any) => setEditingData({...editingData, subject: value})}>\n            <SelectTrigger data-testid=\"select-add-subject\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Physics\">Physics</SelectItem>\n              <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n              <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n            </SelectContent>\n          </Select>\n        </td>\n        <td className=\"p-2\">\n          <Input\n            value={editingData.topic}\n            onChange={(e) => setEditingData({...editingData, topic: e.target.value})}\n            placeholder=\"Topic\"\n            data-testid=\"input-add-topic\"\n          />\n        </td>\n        <td className=\"p-2\">\n          <Select value={editingData.taskType} onValueChange={(value: any) => setEditingData({...editingData, taskType: value})}>\n            <SelectTrigger data-testid=\"select-add-tasktype\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"theory\">Theory</SelectItem>\n              <SelectItem value=\"practice\">Practice</SelectItem>\n              <SelectItem value=\"revision\">Revision</SelectItem>\n              <SelectItem value=\"mock-test\">Mock Test</SelectItem>\n              <SelectItem value=\"dpp\">DPP</SelectItem>\n              <SelectItem value=\"concept-mastery\">Concept Mastery</SelectItem>\n              <SelectItem value=\"intensive-practice\">Intensive Practice</SelectItem>\n              <SelectItem value=\"exam-simulation\">Exam Simulation</SelectItem>\n              <SelectItem value=\"formula-practice\">Formula Practice</SelectItem>\n              <SelectItem value=\"previous-year\">Previous Year</SelectItem>\n              <SelectItem value=\"speed-drill\">Speed Drill</SelectItem>\n              <SelectItem value=\"video-lecture\">Video Lecture</SelectItem>\n              <SelectItem value=\"concept-mapping\">Concept Mapping</SelectItem>\n            </SelectContent>\n          </Select>\n        </td>\n        <td className=\"p-2\">\n          <Textarea\n            value={editingData.description}\n            onChange={(e) => setEditingData({...editingData, description: e.target.value})}\n            placeholder=\"Description\"\n            className=\"min-h-12\"\n            data-testid=\"textarea-add-description\"\n          />\n        </td>\n        <td className=\"p-2\">\n          <Input\n            type=\"number\"\n            value={editingData.timeAllotted}\n            onChange={(e) => setEditingData({...editingData, timeAllotted: parseInt(e.target.value) || 0})}\n            min=\"1\"\n            data-testid=\"input-add-time\"\n          />\n        </td>\n        <td className=\"p-2\">\n          <Select value={editingData.difficulty} onValueChange={(value: any) => setEditingData({...editingData, difficulty: value})}>\n            <SelectTrigger data-testid=\"select-add-difficulty\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"easy\">Easy</SelectItem>\n              <SelectItem value=\"medium\">Medium</SelectItem>\n              <SelectItem value=\"hard\">Hard</SelectItem>\n            </SelectContent>\n          </Select>\n        </td>\n        <td className=\"p-2\">\n          <Textarea\n            value={editingData.notes}\n            onChange={(e) => setEditingData({...editingData, notes: e.target.value})}\n            placeholder=\"Notes\"\n            className=\"min-h-12\"\n            data-testid=\"textarea-add-notes\"\n          />\n        </td>\n        <td className=\"p-2\">\n          <div className=\"flex gap-2\">\n            <Button \n              size=\"sm\" \n              onClick={handleAddTask}\n              data-testid=\"button-save-add\"\n            >\n              <Save className=\"h-4 w-4\" />\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => {\n                setIsAddingTask(false);\n                setEditingData({\n                  date: format(new Date(), 'yyyy-MM-dd'),\n                  subject: 'Mathematics',\n                  topic: '',\n                  taskType: 'theory',\n                  description: '',\n                  timeAllotted: 60,\n                  difficulty: 'medium',\n                  notes: ''\n                });\n              }}\n              data-testid=\"button-cancel-add\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  return (\n    <Card data-testid={`task-manager-${challenge.id}`}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            Task Manager - {challenge.name}\n            <Badge className={challenge.status === 'paused' ? 'bg-chart-2 text-white' : 'bg-chart-1 text-white'}>\n              {challenge.status}\n            </Badge>\n          </CardTitle>\n          <Button \n            onClick={() => setIsAddingTask(true)}\n            disabled={isAddingTask}\n            data-testid=\"button-add-task\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Task\n          </Button>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">\n          Manage all daily tasks for this challenge. {challenge.status === 'paused' ? 'These tasks are hidden from daily view while the challenge is paused.' : ''}\n        </p>\n      </CardHeader>\n      \n      <CardContent>\n        {allChallengeTasks.length === 0 && !isAddingTask ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground mb-4\">No tasks found for this challenge.</p>\n            <Button onClick={() => setIsAddingTask(true)} data-testid=\"button-add-first-task\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add First Task\n            </Button>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\" data-testid=\"tasks-table\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-2\">Date</th>\n                  <th className=\"text-left p-2\">Subject</th>\n                  <th className=\"text-left p-2\">Topic</th>\n                  <th className=\"text-left p-2\">Type</th>\n                  <th className=\"text-left p-2\">Description</th>\n                  <th className=\"text-left p-2\">Time (min)</th>\n                  <th className=\"text-left p-2\">Difficulty</th>\n                  <th className=\"text-left p-2\">Notes</th>\n                  <th className=\"text-left p-2\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                <AddTaskRow />\n                {allChallengeTasks.map(task => (\n                  <TaskRow \n                    key={task.id} \n                    task={task} \n                    isEditing={editingTaskId === task.id}\n                  />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":19285},"client/src/pages/TaskManagement.tsx":{"content":"import { useState } from 'react';\nimport { useChallenges } from '@/contexts/ChallengeContext';\nimport { Challenge } from '@shared/schema';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, Table } from 'lucide-react';\nimport ChallengeTaskManager from '@/components/ChallengeTaskManager';\n\nexport default function TaskManagement() {\n  const { state } = useChallenges();\n  const { challenges, loading } = state;\n  const [selectedChallenge, setSelectedChallenge] = useState<Challenge | null>(null);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\" data-testid=\"loading-task-management\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-chart-1 text-white';\n      case 'completed': return 'bg-chart-1 text-white';\n      case 'paused': return 'bg-chart-2 text-white';\n      case 'archived': return 'bg-muted text-muted-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  if (selectedChallenge) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"task-management-detail\">\n        <div className=\"flex items-center gap-4\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setSelectedChallenge(null)}\n            data-testid=\"button-back-to-challenges\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Challenges\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Task Management</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Excel-like interface to manage daily tasks\n            </p>\n          </div>\n        </div>\n\n        <ChallengeTaskManager challenge={selectedChallenge} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"task-management-page\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Task Management</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Select a challenge to manage its daily tasks with Excel-like functionality\n        </p>\n      </div>\n\n      {challenges.length === 0 ? (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <Table className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Challenges Found</h3>\n            <p className=\"text-muted-foreground mb-4\">Create a challenge first to manage its tasks.</p>\n            <Button asChild>\n              <a href=\"/challenges\">Go to Challenges</a>\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {challenges.map((challenge) => (\n            <Card \n              key={challenge.id} \n              className=\"hover-elevate cursor-pointer\" \n              onClick={() => setSelectedChallenge(challenge)}\n              data-testid={`card-challenge-select-${challenge.id}`}\n            >\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-start justify-between gap-2\">\n                  <div className=\"space-y-1\">\n                    <CardTitle className=\"text-lg font-semibold\" data-testid={`text-challenge-name-${challenge.id}`}>\n                      {challenge.name}\n                    </CardTitle>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {challenge.subjects.length} subjects • {challenge.duration} days\n                    </div>\n                  </div>\n                  <Badge className={getStatusColor(challenge.status)} data-testid={`badge-status-${challenge.id}`}>\n                    {challenge.status}\n                  </Badge>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Task Progress</span>\n                    <span>{challenge.progress.completedTasks}/{challenge.progress.totalTasks}</span>\n                  </div>\n                  <div className=\"w-full bg-secondary rounded-full h-2\">\n                    <div \n                      className=\"bg-primary h-2 rounded-full\" \n                      style={{ \n                        width: `${challenge.progress.totalTasks > 0 \n                          ? (challenge.progress.completedTasks / challenge.progress.totalTasks) * 100 \n                          : 0}%` \n                      }}\n                    ></div>\n                  </div>\n                  {challenge.status === 'paused' && (\n                    <div className=\"text-xs text-muted-foreground mt-2\">\n                      Tasks are hidden from daily view while paused\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5243},"client/src/components/TopicManager.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Plus, Edit, Trash2, Search, BookOpen, Save, X, FolderPlus } from 'lucide-react';\nimport { topicStorage, chapterStorage } from '@/lib/localStorage';\nimport { getAllTopicsForSubject, isCustomTopic, organizeTopicsByCategory, searchTopics, getTopicChapter } from '@/lib/topicUtils';\nimport { getChaptersForSubject, getTopicsForChapter } from '@shared/schema';\n\ninterface EditingTopic {\n  subject: 'Physics' | 'Chemistry' | 'Mathematics';\n  originalName: string;\n  newName: string;\n}\n\ninterface EditingChapter {\n  subject: 'Physics' | 'Chemistry' | 'Mathematics';\n  originalName: string;\n  newName: string;\n}\n\nexport default function TopicManager() {\n  const [activeSubject, setActiveSubject] = useState<'Physics' | 'Chemistry' | 'Mathematics'>('Physics');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isAddChapterDialogOpen, setIsAddChapterDialogOpen] = useState(false);\n  const [newTopicName, setNewTopicName] = useState('');\n  const [newTopicSubject, setNewTopicSubject] = useState<'Physics' | 'Chemistry' | 'Mathematics'>('Physics');\n  const [newTopicClass, setNewTopicClass] = useState<'11th' | '12th'>('12th');\n  const [newTopicChapter, setNewTopicChapter] = useState('');\n  const [newChapterName, setNewChapterName] = useState('');\n  const [editingTopic, setEditingTopic] = useState<EditingTopic | null>(null);\n  const [editingChapter, setEditingChapter] = useState<EditingChapter | null>(null);\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  // Force re-render when topics change\n  const forceRefresh = () => setRefreshKey(prev => prev + 1);\n\n  const handleAddTopic = () => {\n    if (!newTopicName.trim()) return;\n\n    try {\n      topicStorage.addTopic(newTopicSubject, newTopicName.trim(), newTopicClass);\n      setNewTopicName('');\n      setNewTopicClass('12th'); // Reset to default\n      setIsAddDialogOpen(false);\n      forceRefresh();\n    } catch (error) {\n      console.error('Failed to add topic:', error);\n    }\n  };\n\n  const handleEditTopic = (subject: 'Physics' | 'Chemistry' | 'Mathematics', originalName: string) => {\n    setEditingTopic({\n      subject,\n      originalName,\n      newName: originalName\n    });\n  };\n\n  const handleSaveEdit = () => {\n    if (!editingTopic || !editingTopic.newName.trim()) return;\n\n    try {\n      topicStorage.updateTopic(editingTopic.subject, editingTopic.originalName, editingTopic.newName.trim());\n      setEditingTopic(null);\n      forceRefresh();\n    } catch (error) {\n      console.error('Failed to update topic:', error);\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingTopic(null);\n  };\n\n  const handleDeleteTopic = (subject: 'Physics' | 'Chemistry' | 'Mathematics', topicName: string) => {\n    if (!isCustomTopic(subject, topicName)) {\n      alert('Cannot delete default topics. Only custom topics can be deleted.');\n      return;\n    }\n\n    if (confirm(`Are you sure you want to delete the topic \"${topicName}\"?`)) {\n      try {\n        topicStorage.removeTopic(subject, topicName);\n        forceRefresh();\n      } catch (error) {\n        console.error('Failed to delete topic:', error);\n      }\n    }\n  };\n\n  const handleBulkAddTopics = (subject: 'Physics' | 'Chemistry' | 'Mathematics', topicsText: string) => {\n    const topics = topicsText\n      .split('\\n')\n      .map(t => t.trim())\n      .filter(t => t.length > 0);\n\n    if (topics.length > 0) {\n      try {\n        topicStorage.addMultipleTopics(subject, topics);\n        forceRefresh();\n      } catch (error) {\n        console.error('Failed to add topics:', error);\n      }\n    }\n  };\n\n  // Chapter handlers\n  const handleAddChapter = () => {\n    if (!newChapterName.trim()) return;\n\n    try {\n      chapterStorage.addChapter(newTopicSubject, newChapterName.trim());\n      setNewChapterName('');\n      setIsAddChapterDialogOpen(false);\n      forceRefresh();\n    } catch (error) {\n      console.error('Failed to add chapter:', error);\n    }\n  };\n\n  const handleEditChapter = (subject: 'Physics' | 'Chemistry' | 'Mathematics', originalName: string) => {\n    setEditingChapter({\n      subject,\n      originalName,\n      newName: originalName\n    });\n  };\n\n  const handleSaveChapterEdit = () => {\n    if (!editingChapter || !editingChapter.newName.trim()) return;\n\n    try {\n      chapterStorage.updateChapter(editingChapter.subject, editingChapter.originalName, editingChapter.newName.trim());\n      setEditingChapter(null);\n      forceRefresh();\n    } catch (error) {\n      console.error('Failed to update chapter:', error);\n    }\n  };\n\n  const handleCancelChapterEdit = () => {\n    setEditingChapter(null);\n  };\n\n  const handleDeleteChapter = (subject: 'Physics' | 'Chemistry' | 'Mathematics', chapterName: string) => {\n    if (confirm(`Are you sure you want to delete the chapter \"${chapterName}\" and all its topics?`)) {\n      try {\n        chapterStorage.removeChapter(subject, chapterName);\n        forceRefresh();\n      } catch (error) {\n        console.error('Failed to delete chapter:', error);\n      }\n    }\n  };\n\n  const handleAddTopicToChapter = () => {\n    if (!newTopicName.trim()) return;\n\n    try {\n      if (!newTopicChapter || newTopicChapter === 'Custom Topics') {\n        // Add to general custom topics with class selection\n        topicStorage.addTopic(newTopicSubject, newTopicName.trim(), newTopicClass);\n      } else {\n        // Add to specific custom chapter\n        chapterStorage.addTopicToChapter(newTopicSubject, newTopicChapter, newTopicName.trim());\n      }\n      setNewTopicName('');\n      setNewTopicChapter('');\n      setNewTopicClass('12th'); // Reset to default\n      setIsAddDialogOpen(false);\n      forceRefresh();\n    } catch (error) {\n      console.error('Failed to add topic to chapter:', error);\n    }\n  };\n\n  const SubjectTopicView = ({ subject }: { subject: 'Physics' | 'Chemistry' | 'Mathematics' }) => {\n    const categorizedTopics = organizeTopicsByCategory(subject);\n    const customChapters = chapterStorage.getAll()[subject];\n    \n    if (searchQuery) {\n      const filteredTopics = searchTopics(searchQuery, subject) as string[];\n      return (\n        <div className=\"space-y-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            {filteredTopics.length} topics found for \"{searchQuery}\"\n          </div>\n          <div className=\"grid gap-2\">\n            {filteredTopics.map((topic) => (\n              <TopicItem\n                key={topic}\n                subject={subject}\n                topic={topic}\n                isCustom={isCustomTopic(subject, topic)}\n                onEdit={() => handleEditTopic(subject, topic)}\n                onDelete={() => handleDeleteTopic(subject, topic)}\n              />\n            ))}\n          </div>\n        </div>\n      );\n    }\n\n    // Combine default chapters and custom chapters\n    const allChapters = { ...categorizedTopics };\n    Object.entries(customChapters).forEach(([chapterName, topics]) => {\n      allChapters[chapterName] = topics;\n    });\n\n    return (\n      <Accordion type=\"multiple\" className=\"space-y-2\" data-testid={`accordion-${subject.toLowerCase()}`}>\n        {Object.entries(allChapters).map(([category, topics]) => {\n          const isCustomChapter = customChapters[category] !== undefined;\n          const isEditingThisChapter = editingChapter?.subject === subject && editingChapter?.originalName === category;\n          \n          return (\n            <AccordionItem key={category} value={category}>\n              <AccordionTrigger className=\"text-left\" data-testid={`accordion-trigger-${category.toLowerCase().replace(/\\s+/g, '-')}`}>\n                <div className=\"flex items-center justify-between w-full pr-4\">\n                  {isEditingThisChapter ? (\n                    <div className=\"flex items-center gap-2 flex-1\" onClick={(e) => e.stopPropagation()}>\n                      <Input\n                        value={editingChapter?.newName || ''}\n                        onChange={(e) => setEditingChapter(prev => prev ? { ...prev, newName: e.target.value } : null)}\n                        className=\"flex-1\"\n                        data-testid={`input-edit-chapter-${category}`}\n                      />\n                      <Button size=\"sm\" onClick={handleSaveChapterEdit} data-testid={`button-save-chapter-${category}`}>\n                        <Save className=\"h-4 w-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" onClick={handleCancelChapterEdit} data-testid={`button-cancel-chapter-${category}`}>\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex items-center gap-2\">\n                        <BookOpen className=\"h-4 w-4\" />\n                        <span>{category}</span>\n                        <Badge variant=\"secondary\">{topics.length}</Badge>\n                        {isCustomChapter && <Badge variant=\"outline\">Custom</Badge>}\n                      </div>\n                      {isCustomChapter && (\n                        <div className=\"flex items-center gap-1\" onClick={(e) => e.stopPropagation()}>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\" \n                            onClick={() => handleEditChapter(subject, category)}\n                            data-testid={`button-edit-chapter-${category}`}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\" \n                            onClick={() => handleDeleteChapter(subject, category)}\n                            data-testid={`button-delete-chapter-${category}`}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"grid gap-2 pt-2\">\n                  {topics.map((topic) => (\n                    <TopicItem\n                      key={topic}\n                      subject={subject}\n                      topic={topic}\n                      isCustom={isCustomTopic(subject, topic) || isCustomChapter}\n                      onEdit={() => handleEditTopic(subject, topic)}\n                      onDelete={() => handleDeleteTopic(subject, topic)}\n                    />\n                  ))}\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n          );\n        })}\n      </Accordion>\n    );\n  };\n\n  const TopicItem = ({\n    subject,\n    topic,\n    isCustom,\n    onEdit,\n    onDelete\n  }: {\n    subject: 'Physics' | 'Chemistry' | 'Mathematics';\n    topic: string;\n    isCustom: boolean;\n    onEdit: () => void;\n    onDelete: () => void;\n  }) => {\n    const isEditing = editingTopic?.subject === subject && editingTopic?.originalName === topic;\n\n    if (isEditing) {\n      return (\n        <div className=\"flex items-center gap-2 p-2 border rounded-md bg-muted/20\" data-testid={`edit-topic-${topic}`}>\n          <Input\n            value={editingTopic?.newName || ''}\n            onChange={(e) => setEditingTopic(prev => prev ? { ...prev, newName: e.target.value } : null)}\n            className=\"flex-1\"\n            data-testid={`input-edit-topic-${topic}`}\n          />\n          <Button size=\"sm\" onClick={handleSaveEdit} data-testid={`button-save-topic-${topic}`}>\n            <Save className=\"h-4 w-4\" />\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" onClick={handleCancelEdit} data-testid={`button-cancel-topic-${topic}`}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center justify-between p-2 border rounded-md hover-elevate\" data-testid={`topic-item-${topic}`}>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm\" data-testid={`text-topic-${topic}`}>{topic}</span>\n          {isCustom && <Badge variant=\"outline\" data-testid={`badge-custom-${topic}`}>Custom</Badge>}\n        </div>\n        <div className=\"flex items-center gap-1\">\n          {isCustom && (\n            <Button \n              size=\"sm\" \n              variant=\"ghost\" \n              onClick={onEdit}\n              data-testid={`button-edit-topic-${topic}`}\n            >\n              <Edit className=\"h-3 w-3\" />\n            </Button>\n          )}\n          {isCustom && (\n            <Button \n              size=\"sm\" \n              variant=\"ghost\" \n              onClick={onDelete}\n              data-testid={`button-delete-topic-${topic}`}\n            >\n              <Trash2 className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const BulkAddDialog = ({ subject }: { subject: 'Physics' | 'Chemistry' | 'Mathematics' }) => {\n    const [bulkTopics, setBulkTopics] = useState('');\n    const [isBulkDialogOpen, setIsBulkDialogOpen] = useState(false);\n\n    const handleBulkAdd = () => {\n      handleBulkAddTopics(subject, bulkTopics);\n      setBulkTopics('');\n      setIsBulkDialogOpen(false);\n    };\n\n    return (\n      <Dialog open={isBulkDialogOpen} onOpenChange={setIsBulkDialogOpen}>\n        <DialogTrigger asChild>\n          <Button variant=\"outline\" size=\"sm\" data-testid={`button-bulk-add-${subject.toLowerCase()}`}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Bulk Add\n          </Button>\n        </DialogTrigger>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Bulk Add Topics - {subject}</DialogTitle>\n            <DialogDescription>\n              Enter multiple topics, one per line. These will be added as custom topics.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"bulk-topics\">Topics (one per line)</Label>\n              <textarea\n                id=\"bulk-topics\"\n                className=\"w-full min-h-32 mt-1 p-2 border rounded-md\"\n                value={bulkTopics}\n                onChange={(e) => setBulkTopics(e.target.value)}\n                placeholder=\"Topic 1&#10;Topic 2&#10;Topic 3\"\n                data-testid={`textarea-bulk-topics-${subject.toLowerCase()}`}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsBulkDialogOpen(false)} data-testid=\"button-cancel-bulk-add\">\n              Cancel\n            </Button>\n            <Button onClick={handleBulkAdd} disabled={!bulkTopics.trim()} data-testid=\"button-save-bulk-add\">\n              Add Topics\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    );\n  };\n\n  return (\n    <Card key={refreshKey} data-testid=\"topic-manager\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            Topic Management\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Dialog open={isAddChapterDialogOpen} onOpenChange={setIsAddChapterDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" data-testid=\"button-add-chapter\">\n                  <FolderPlus className=\"h-4 w-4 mr-2\" />\n                  Add Chapter\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New Chapter</DialogTitle>\n                  <DialogDescription>\n                    Create a new custom chapter to organize your topics better.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"chapter-subject\">Subject</Label>\n                    <Select value={newTopicSubject} onValueChange={(value: any) => setNewTopicSubject(value)}>\n                      <SelectTrigger data-testid=\"select-chapter-subject\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Physics\">Physics</SelectItem>\n                        <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n                        <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"chapter-name\">Chapter Name</Label>\n                    <Input\n                      id=\"chapter-name\"\n                      value={newChapterName}\n                      onChange={(e) => setNewChapterName(e.target.value)}\n                      placeholder=\"Enter chapter name\"\n                      data-testid=\"input-chapter-name\"\n                    />\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button variant=\"outline\" onClick={() => setIsAddChapterDialogOpen(false)} data-testid=\"button-cancel-add-chapter\">\n                    Cancel\n                  </Button>\n                  <Button onClick={handleAddChapter} disabled={!newChapterName.trim()} data-testid=\"button-save-add-chapter\">\n                    Add Chapter\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n            \n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-topic\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Topic\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New Topic</DialogTitle>\n                  <DialogDescription>\n                    Add a custom topic to any subject. You can add it to an existing chapter or create a new one.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Select value={newTopicSubject} onValueChange={(value: any) => setNewTopicSubject(value)}>\n                      <SelectTrigger data-testid=\"select-topic-subject\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Physics\">Physics</SelectItem>\n                        <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n                        <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"class\">Class</Label>\n                    <Select value={newTopicClass} onValueChange={(value: any) => setNewTopicClass(value)}>\n                      <SelectTrigger data-testid=\"select-topic-class\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"11th\">11th Grade</SelectItem>\n                        <SelectItem value=\"12th\">12th Grade</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"chapter\">Chapter (Optional)</Label>\n                    <Select value={newTopicChapter} onValueChange={setNewTopicChapter}>\n                      <SelectTrigger data-testid=\"select-topic-chapter\">\n                        <SelectValue placeholder=\"Select a chapter\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Custom Topics\">Custom Topics (Default)</SelectItem>\n                        {Object.keys(chapterStorage.getAll()[newTopicSubject]).map((chapter) => (\n                          <SelectItem key={chapter} value={chapter}>\n                            {chapter}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"topic-name\">Topic Name</Label>\n                    <Input\n                      id=\"topic-name\"\n                      value={newTopicName}\n                      onChange={(e) => setNewTopicName(e.target.value)}\n                      placeholder=\"Enter topic name\"\n                      data-testid=\"input-topic-name\"\n                    />\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} data-testid=\"button-cancel-add\">\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleAddTopicToChapter} \n                    disabled={!newTopicName.trim()} \n                    data-testid=\"button-save-add\"\n                  >\n                    Add Topic\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">\n          Manage all JEE topics by subject. Add custom topics, edit existing ones, and organize your study materials.\n        </p>\n      </CardHeader>\n\n      <CardContent>\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search topics across all subjects...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-topics\"\n            />\n          </div>\n        </div>\n\n        {/* Subject Tabs */}\n        <Tabs value={activeSubject} onValueChange={(value) => setActiveSubject(value as any)} className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <TabsList data-testid=\"tabs-subjects\">\n              <TabsTrigger value=\"Physics\" data-testid=\"tab-physics\">Physics</TabsTrigger>\n              <TabsTrigger value=\"Chemistry\" data-testid=\"tab-chemistry\">Chemistry</TabsTrigger>\n              <TabsTrigger value=\"Mathematics\" data-testid=\"tab-mathematics\">Mathematics</TabsTrigger>\n            </TabsList>\n            <BulkAddDialog subject={activeSubject} />\n          </div>\n\n          <TabsContent value=\"Physics\" className=\"space-y-4\" data-testid=\"content-physics\">\n            <div className=\"text-sm text-muted-foreground\">\n              {getAllTopicsForSubject('Physics').length} topics available\n            </div>\n            <SubjectTopicView subject=\"Physics\" />\n          </TabsContent>\n\n          <TabsContent value=\"Chemistry\" className=\"space-y-4\" data-testid=\"content-chemistry\">\n            <div className=\"text-sm text-muted-foreground\">\n              {getAllTopicsForSubject('Chemistry').length} topics available\n            </div>\n            <SubjectTopicView subject=\"Chemistry\" />\n          </TabsContent>\n\n          <TabsContent value=\"Mathematics\" className=\"space-y-4\" data-testid=\"content-mathematics\">\n            <div className=\"text-sm text-muted-foreground\">\n              {getAllTopicsForSubject('Mathematics').length} topics available\n            </div>\n            <SubjectTopicView subject=\"Mathematics\" />\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":24913},"client/src/lib/topicUtils.ts":{"content":"import { JEE_TOPICS, JEE_CHAPTERS, getChaptersForSubject, getTopicsForChapter, getAllTopicsForSubject as getSchemaTopics, getChapterForTopic } from '@shared/schema';\nimport { CustomTopics, CustomTopicWithClass, topicStorage } from '@/lib/localStorage';\n\n// Helper function to get all topics (default + custom) for a subject\nexport const getAllTopicsForSubject = (subject: 'Physics' | 'Chemistry' | 'Mathematics'): string[] => {\n  const defaultTopics = JEE_TOPICS[subject];\n  const customTopics = topicStorage.getAll();\n  \n  // Merge default and custom topics, removing duplicates\n  const customTopicNames = customTopics[subject].map(topic => topic.name);\n  const allTopics = [...defaultTopics, ...customTopicNames];\n  return Array.from(new Set(allTopics)).sort();\n};\n\n// Helper function to get all topics for all subjects\nexport const getAllTopics = (): { Physics: string[]; Chemistry: string[]; Mathematics: string[] } => {\n  return {\n    Physics: getAllTopicsForSubject('Physics'),\n    Chemistry: getAllTopicsForSubject('Chemistry'),\n    Mathematics: getAllTopicsForSubject('Mathematics')\n  };\n};\n\n// Helper function to check if a topic is custom (not in default list)\nexport const isCustomTopic = (subject: 'Physics' | 'Chemistry' | 'Mathematics', topic: string): boolean => {\n  return !(JEE_TOPICS[subject] as readonly string[]).includes(topic);\n};\n\n// Helper function to get only custom topics\nexport const getCustomTopics = (): CustomTopics => {\n  return topicStorage.getAll();\n};\n\n// Helper function to organize topics by category/chapter (for display purposes)\nexport const organizeTopicsByCategory = (subject: 'Physics' | 'Chemistry' | 'Mathematics') => {\n  const categories: { [key: string]: string[] } = {};\n  \n  // Get default topics organized by chapters from the new schema\n  const chapters = getChaptersForSubject(subject);\n  \n  chapters.forEach(chapter => {\n    const chapterTopics = getTopicsForChapter(subject, chapter);\n    if (chapterTopics.length > 0) {\n      categories[chapter] = chapterTopics;\n    }\n  });\n  \n  // Add custom topics to a separate category\n  const customTopics = topicStorage.getAll()[subject];\n  if (customTopics.length > 0) {\n    categories['Custom Topics'] = customTopics.map(topic => topic.name);\n  }\n  \n  return categories;\n};\n\n// New chapter-aware helper functions\n\n// Helper function to get all chapters with their topics (including custom)\nexport const getChaptersWithTopics = (subject: 'Physics' | 'Chemistry' | 'Mathematics') => {\n  const chapters = getChaptersForSubject(subject);\n  const result: { [chapter: string]: string[] } = {};\n  \n  chapters.forEach(chapter => {\n    result[chapter] = getTopicsForChapter(subject, chapter);\n  });\n  \n  // Add custom topics if they exist\n  const customTopics = topicStorage.getAll()[subject];\n  if (customTopics.length > 0) {\n    result['Custom Topics'] = customTopics.map(topic => topic.name);\n  }\n  \n  return result;\n};\n\n// Helper function to get chapter for a topic (including custom topics)\nexport const getTopicChapter = (subject: 'Physics' | 'Chemistry' | 'Mathematics', topic: string): string => {\n  // First check if it's a custom topic\n  if (isCustomTopic(subject, topic)) {\n    return 'Custom Topics';\n  }\n  \n  // Otherwise, get the chapter from the schema\n  return getChapterForTopic(subject, topic) || 'Unknown';\n};\n\n// Helper function for topic search\nexport const searchTopics = (query: string, subject?: 'Physics' | 'Chemistry' | 'Mathematics') => {\n  const lowercaseQuery = query.toLowerCase();\n  \n  if (subject) {\n    return getAllTopicsForSubject(subject).filter(topic => \n      topic.toLowerCase().includes(lowercaseQuery)\n    );\n  }\n  \n  const allTopics = getAllTopics();\n  const results: { subject: string; topics: string[] }[] = [];\n  \n  Object.entries(allTopics).forEach(([subjectName, topics]) => {\n    const matchingTopics = topics.filter(topic => \n      topic.toLowerCase().includes(lowercaseQuery)\n    );\n    if (matchingTopics.length > 0) {\n      results.push({ subject: subjectName, topics: matchingTopics });\n    }\n  });\n  \n  return results;\n};\n\n// Grade-level chapter mappings for JEE syllabus\nconst GRADE_LEVEL_CHAPTERS = {\n  Physics: {\n    '11th Grade': ['Mechanics', 'Properties of Matter', 'Heat and Thermodynamics', 'Oscillations and Waves'],\n    '12th Grade': ['Electricity and Magnetism', 'Electromagnetic Waves and Optics', 'Modern Physics']\n  },\n  Chemistry: {\n    '11th Grade': ['Physical Chemistry'],\n    '12th Grade': ['Inorganic Chemistry', 'Organic Chemistry']\n  },\n  Mathematics: {\n    '11th Grade': ['Algebra', 'Coordinate Geometry', 'Mathematical Reasoning', 'Statistics and Probability'],\n    '12th Grade': ['Calculus', 'Vector Algebra and Geometry', 'Matrices and Determinants']\n  }\n} as const;\n\n// Helper function to get chapters organized by grade levels\nexport const getChaptersByGrade = (subject: 'Physics' | 'Chemistry' | 'Mathematics') => {\n  const result: { [grade: string]: { [chapter: string]: string[] } } = {\n    '11th Grade': {},\n    '12th Grade': {}\n  };\n  \n  // Get all chapters from schema to ensure complete coverage\n  const allChapters = getChaptersForSubject(subject);\n  const mappedChapters = new Set<string>();\n  \n  // Organize mapped chapters by grade level\n  const gradeChapters = GRADE_LEVEL_CHAPTERS[subject];\n  \n  Object.entries(gradeChapters).forEach(([grade, chapters]) => {\n    chapters.forEach((chapter: string) => {\n      const topics = getTopicsForChapter(subject, chapter);\n      if (topics.length > 0) {\n        result[grade][chapter] = topics;\n        mappedChapters.add(chapter);\n      }\n    });\n  });\n  \n  // Add any unmapped chapters to 12th Grade as fallback\n  const unmappedChapters = allChapters.filter(chapter => !mappedChapters.has(chapter));\n  unmappedChapters.forEach((chapter: string) => {\n    const topics = getTopicsForChapter(subject, chapter);\n    if (topics.length > 0) {\n      result['12th Grade'][chapter] = topics;\n    }\n  });\n  \n  // Add custom topics to their respective grade sections\n  const customTopics = topicStorage.getAll()[subject];\n  if (customTopics.length > 0) {\n    // Group custom topics by class\n    const customTopicsByClass = {\n      '11th': customTopics.filter(topic => topic.class === '11th').map(topic => topic.name),\n      '12th': customTopics.filter(topic => topic.class === '12th').map(topic => topic.name)\n    };\n    \n    // Add custom topics to their respective grades\n    if (customTopicsByClass['11th'].length > 0) {\n      result['11th Grade']['Custom Topics'] = customTopicsByClass['11th'];\n    }\n    if (customTopicsByClass['12th'].length > 0) {\n      result['12th Grade']['Custom Topics'] = customTopicsByClass['12th'];\n    }\n  }\n  \n  return result;\n};\n\n// Helper function to get all topics organized by grade and chapter\nexport const getTopicsByGradeAndChapter = (subject: 'Physics' | 'Chemistry' | 'Mathematics') => {\n  return getChaptersByGrade(subject);\n};","size_bytes":6883},"client/src/pages/Topics.tsx":{"content":"import TopicManager from '@/components/TopicManager';\n\nexport default function Topics() {\n  return (\n    <div className=\"space-y-6\" data-testid=\"topics-page\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Topics Management</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Manage all JEE topics across Physics, Chemistry, and Mathematics. Add custom topics, organize by chapters, and create your personalized study plan.\n        </p>\n      </div>\n\n      <TopicManager />\n    </div>\n  );\n}","size_bytes":528},"replit.md":{"content":"# JEE Challenge App\n\n## Overview\n\nThe JEE Challenge App is a comprehensive study management platform designed specifically for JEE (Joint Entrance Examination) aspirants. The application enables students to create personalized study challenges across Physics, Chemistry, and Mathematics with structured daily task tracking, progress analytics, and gamified streak counters. The platform combines the functionality of educational management systems with productivity features to help students maintain consistent study habits and track their preparation progress.\n\nThe application follows a client-server architecture with a React-based frontend and Express.js backend, utilizing local storage for data persistence and featuring a modern, responsive design system.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **State Management**: Context API with useReducer for challenge and task state management, React Query for server state caching\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Comprehensive component library based on Radix UI primitives with custom styling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **API Design**: RESTful API structure with /api prefix for all endpoints\n- **Data Layer**: Modular storage interface supporting both in-memory and database implementations\n- **Development Tools**: Vite for hot module replacement and development server\n- **Type System**: Shared TypeScript schemas between client and server\n\n### Data Storage Solutions\n- **Primary Storage**: Drizzle ORM configured for PostgreSQL with migration support\n- **Local Storage**: Browser localStorage for client-side data persistence and offline functionality\n- **Schema Design**: Comprehensive data models for challenges, daily tasks, topics, and progress tracking\n- **Data Structure**: Organized around challenge-based study plans with hierarchical topic organization\n\n### Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store (connect-pg-simple)\n- **User Context**: Challenge-based user identification system\n- **Security**: Basic session-based authentication prepared for future enhancement\n\n### Design System\n- **Theme Support**: Light/dark mode toggle with CSS custom properties\n- **Color System**: Educational-focused palette with subject-specific color coding (Physics: Blue, Chemistry: Green, Mathematics: Orange)\n- **Typography**: Inter font family optimized for academic content readability\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n\n## External Dependencies\n\n### Database and ORM\n- **Neon Database**: Serverless PostgreSQL database for production data storage\n- **Drizzle ORM**: Type-safe database operations with schema validation\n- **Drizzle Kit**: Database migration and schema management tools\n\n### UI and Styling\n- **Shadcn/UI**: Pre-built component library with Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Radix UI**: Accessible component primitives for complex UI interactions\n- **Lucide React**: Icon library for consistent iconography\n\n### State Management and Data Fetching\n- **TanStack React Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form state management with validation\n- **Hookform Resolvers**: Schema validation integration\n\n### Development and Build Tools\n- **Vite**: Fast development server and build tool with HMR\n- **TSX**: TypeScript execution for development server\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Utilities and Helpers\n- **Date-fns**: Date manipulation and formatting utilities\n- **Class Variance Authority**: Type-safe CSS class composition\n- **Zod**: Runtime type validation and schema parsing\n- **Clsx/Tailwind Merge**: Conditional CSS class management\n\n### Animation and Interaction\n- **Framer Motion**: Animation library for streak counters and interactive elements\n- **Embla Carousel**: Carousel component for data visualization\n- **Recharts**: Chart library for progress visualization and analytics\n\n### Specialized JEE Features\n- **Topic Management**: Hierarchical organization of JEE syllabus topics by subject and chapter\n- **Challenge Templates**: Pre-configured study patterns (revision, DPP, intensive practice)\n- **Progress Tracking**: Comprehensive analytics for study patterns and performance metrics\n- **Streak Gamification**: Motivation system with study streaks and achievements","size_bytes":4764}},"version":1}